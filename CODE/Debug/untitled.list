
untitled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fec  08005fec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ff4  08005ff4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000074  08006070  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006070  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012221  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f7  00000000  00000000  0003230e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00034a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7f  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285c0  00000000  00000000  00036457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001378b  00000000  00000000  0005ea17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff656  00000000  00000000  000721a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a4  00000000  00000000  001717f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0017609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000074 	.word	0x20000074
 8000210:	00000000 	.word	0x00000000
 8000214:	08005ee8 	.word	0x08005ee8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000078 	.word	0x20000078
 8000230:	08005ee8 	.word	0x08005ee8

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000254:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000258:	f000 b982 	b.w	8000560 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800027a:	460d      	mov	r5, r1
 800027c:	4604      	mov	r4, r0
 800027e:	460f      	mov	r7, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d146      	bne.n	8000312 <__udivmoddi4+0x9e>
 8000284:	428a      	cmp	r2, r1
 8000286:	4694      	mov	ip, r2
 8000288:	d95e      	bls.n	8000348 <__udivmoddi4+0xd4>
 800028a:	fab2 f382 	clz	r3, r2
 800028e:	b143      	cbz	r3, 80002a2 <__udivmoddi4+0x2e>
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	f1c3 0220 	rsb	r2, r3, #32
 8000298:	409f      	lsls	r7, r3
 800029a:	409c      	lsls	r4, r3
 800029c:	fa20 f202 	lsr.w	r2, r0, r2
 80002a0:	4317      	orrs	r7, r2
 80002a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a6:	fa1f f58c 	uxth.w	r5, ip
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x5e>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x5c>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 8134 	bhi.w	8000538 <__udivmoddi4+0x2c4>
 80002d0:	4639      	mov	r1, r7
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	fb00 f505 	mul.w	r5, r0, r5
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x88>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x86>
 80002f4:	42a5      	cmp	r5, r4
 80002f6:	f200 8119 	bhi.w	800052c <__udivmoddi4+0x2b8>
 80002fa:	4610      	mov	r0, r2
 80002fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000300:	1b64      	subs	r4, r4, r5
 8000302:	2100      	movs	r1, #0
 8000304:	b11e      	cbz	r6, 800030e <__udivmoddi4+0x9a>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c6 4300 	strd	r4, r3, [r6]
 800030e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0xb4>
 8000316:	2e00      	cmp	r6, #0
 8000318:	f000 80fc 	beq.w	8000514 <__udivmoddi4+0x2a0>
 800031c:	2100      	movs	r1, #0
 800031e:	e9c6 0500 	strd	r0, r5, [r6]
 8000322:	4608      	mov	r0, r1
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f183 	clz	r1, r3
 800032c:	2900      	cmp	r1, #0
 800032e:	d14c      	bne.n	80003ca <__udivmoddi4+0x156>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2a6>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2a6>
 800033c:	4608      	mov	r0, r1
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e5      	beq.n	800030e <__udivmoddi4+0x9a>
 8000342:	e9c6 4700 	strd	r4, r7, [r6]
 8000346:	e7e2      	b.n	800030e <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xd8>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809f 	bne.w	8000494 <__udivmoddi4+0x220>
 8000356:	1a8a      	subs	r2, r1, r2
 8000358:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 f5fe 	udiv	r5, r2, lr
 8000366:	fb0e 2015 	mls	r0, lr, r5, r2
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb07 f005 	mul.w	r0, r7, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d90f      	bls.n	8000398 <__udivmoddi4+0x124>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000380:	bf2c      	ite	cs
 8000382:	f04f 0901 	movcs.w	r9, #1
 8000386:	f04f 0900 	movcc.w	r9, #0
 800038a:	4290      	cmp	r0, r2
 800038c:	d903      	bls.n	8000396 <__udivmoddi4+0x122>
 800038e:	f1b9 0f00 	cmp.w	r9, #0
 8000392:	f000 80ce 	beq.w	8000532 <__udivmoddi4+0x2be>
 8000396:	4645      	mov	r5, r8
 8000398:	1a12      	subs	r2, r2, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a0:	fb0e 2210 	mls	r2, lr, r0, r2
 80003a4:	fb00 f707 	mul.w	r7, r0, r7
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	d908      	bls.n	80003c2 <__udivmoddi4+0x14e>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x14c>
 80003ba:	42a7      	cmp	r7, r4
 80003bc:	f200 80b3 	bhi.w	8000526 <__udivmoddi4+0x2b2>
 80003c0:	4610      	mov	r0, r2
 80003c2:	1be4      	subs	r4, r4, r7
 80003c4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c8:	e79c      	b.n	8000304 <__udivmoddi4+0x90>
 80003ca:	f1c1 0420 	rsb	r4, r1, #32
 80003ce:	408b      	lsls	r3, r1
 80003d0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003d4:	fa22 f704 	lsr.w	r7, r2, r4
 80003d8:	40e5      	lsrs	r5, r4
 80003da:	408a      	lsls	r2, r1
 80003dc:	431f      	orrs	r7, r3
 80003de:	fa20 f304 	lsr.w	r3, r0, r4
 80003e2:	4088      	lsls	r0, r1
 80003e4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e8:	ea43 030c 	orr.w	r3, r3, ip
 80003ec:	fa1f fc87 	uxth.w	ip, r7
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb5 fef8 	udiv	lr, r5, r8
 80003f8:	fb08 551e 	mls	r5, r8, lr, r5
 80003fc:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000400:	fb0e f90c 	mul.w	r9, lr, ip
 8000404:	45a9      	cmp	r9, r5
 8000406:	d90e      	bls.n	8000426 <__udivmoddi4+0x1b2>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	45a9      	cmp	r9, r5
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b0>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ca>
 8000424:	46d6      	mov	lr, sl
 8000426:	eba5 0509 	sub.w	r5, r5, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000432:	fb08 5513 	mls	r5, r8, r3, r5
 8000436:	fb03 fc0c 	mul.w	ip, r3, ip
 800043a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800043e:	45ac      	cmp	ip, r5
 8000440:	d906      	bls.n	8000450 <__udivmoddi4+0x1dc>
 8000442:	197d      	adds	r5, r7, r5
 8000444:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000448:	d201      	bcs.n	800044e <__udivmoddi4+0x1da>
 800044a:	45ac      	cmp	ip, r5
 800044c:	d87e      	bhi.n	800054c <__udivmoddi4+0x2d8>
 800044e:	4643      	mov	r3, r8
 8000450:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000454:	eba5 050c 	sub.w	r5, r5, ip
 8000458:	fba3 9802 	umull	r9, r8, r3, r2
 800045c:	4545      	cmp	r5, r8
 800045e:	46ce      	mov	lr, r9
 8000460:	46c4      	mov	ip, r8
 8000462:	d302      	bcc.n	800046a <__udivmoddi4+0x1f6>
 8000464:	d106      	bne.n	8000474 <__udivmoddi4+0x200>
 8000466:	4548      	cmp	r0, r9
 8000468:	d204      	bcs.n	8000474 <__udivmoddi4+0x200>
 800046a:	3b01      	subs	r3, #1
 800046c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000470:	eb68 0c07 	sbc.w	ip, r8, r7
 8000474:	2e00      	cmp	r6, #0
 8000476:	d06f      	beq.n	8000558 <__udivmoddi4+0x2e4>
 8000478:	ebb0 020e 	subs.w	r2, r0, lr
 800047c:	eb65 050c 	sbc.w	r5, r5, ip
 8000480:	40ca      	lsrs	r2, r1
 8000482:	fa05 f404 	lsl.w	r4, r5, r4
 8000486:	40cd      	lsrs	r5, r1
 8000488:	4618      	mov	r0, r3
 800048a:	4314      	orrs	r4, r2
 800048c:	2100      	movs	r1, #0
 800048e:	e9c6 4500 	strd	r4, r5, [r6]
 8000492:	e73c      	b.n	800030e <__udivmoddi4+0x9a>
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	f1c3 0220 	rsb	r2, r3, #32
 800049c:	4099      	lsls	r1, r3
 800049e:	409c      	lsls	r4, r3
 80004a0:	40d5      	lsrs	r5, r2
 80004a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a6:	fa20 f202 	lsr.w	r2, r0, r2
 80004aa:	fa1f f78c 	uxth.w	r7, ip
 80004ae:	fbb5 f0fe 	udiv	r0, r5, lr
 80004b2:	430a      	orrs	r2, r1
 80004b4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004b8:	0c11      	lsrs	r1, r2, #16
 80004ba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004be:	fb00 f507 	mul.w	r5, r0, r7
 80004c2:	428d      	cmp	r5, r1
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x270>
 80004c6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	428d      	cmp	r5, r1
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x26e>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d2>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b49      	subs	r1, r1, r5
 80004e6:	b292      	uxth	r2, r2
 80004e8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004ec:	fb0e 1115 	mls	r1, lr, r5, r1
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	fb05 f107 	mul.w	r1, r5, r7
 80004f8:	4291      	cmp	r1, r2
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x298>
 80004fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000500:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x296>
 8000506:	4291      	cmp	r1, r2
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2de>
 800050a:	4645      	mov	r5, r8
 800050c:	1a52      	subs	r2, r2, r1
 800050e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000512:	e726      	b.n	8000362 <__udivmoddi4+0xee>
 8000514:	4631      	mov	r1, r6
 8000516:	4630      	mov	r0, r6
 8000518:	e6f9      	b.n	800030e <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb65 0203 	sbc.w	r2, r5, r3
 8000520:	2001      	movs	r0, #1
 8000522:	4617      	mov	r7, r2
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xca>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14e>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e4      	b.n	80002fc <__udivmoddi4+0x88>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	e72f      	b.n	8000398 <__udivmoddi4+0x124>
 8000538:	3902      	subs	r1, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c9      	b.n	80002d2 <__udivmoddi4+0x5e>
 800053e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000542:	443d      	add	r5, r7
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b2>
 8000546:	3802      	subs	r0, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x270>
 800054c:	3b02      	subs	r3, #2
 800054e:	443d      	add	r5, r7
 8000550:	e77e      	b.n	8000450 <__udivmoddi4+0x1dc>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x298>
 8000558:	4618      	mov	r0, r3
 800055a:	4631      	mov	r1, r6
 800055c:	e6d7      	b.n	800030e <__udivmoddi4+0x9a>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <HAL_UART_TxCpltCallback>:
volatile uint8_t ringBuffer[MAX_BUFFER];
volatile uint8_t pos = 0;
uint8_t test;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* uart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	printf("transmission");
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <HAL_UART_TxCpltCallback+0x18>)
 800056e:	f004 fe37 	bl	80051e0 <iprintf>
//	HAL_UART_Receive_IT(&huart2, &ringBuffer[pos++], 1);
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	08005f0c 	.word	0x08005f0c

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b598      	push	{r3, r4, r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000584:	f004 fcee 	bl	8004f64 <initialise_monitor_handles>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000588:	f000 fbc9 	bl	8000d1e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058c:	f000 f840 	bl	8000610 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000590:	f000 f92c 	bl	80007ec <MX_GPIO_Init>
	MX_ICACHE_Init();
 8000594:	f000 f8ca 	bl	800072c <MX_ICACHE_Init>
	MX_I2C2_Init();
 8000598:	f000 f888 	bl	80006ac <MX_I2C2_Init>
	MX_USART2_UART_Init();
 800059c:	f000 f8da 	bl	8000754 <MX_USART2_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)user_data, strlen(user_data));
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <main+0x84>)
 80005a2:	681c      	ldr	r4, [r3, #0]
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <main+0x84>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe43 	bl	8000234 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	4621      	mov	r1, r4
 80005b6:	4814      	ldr	r0, [pc, #80]	; (8000608 <main+0x88>)
 80005b8:	f002 fec2 	bl	8003340 <HAL_UART_Transmit_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0x8c>)
 80005c4:	f000 ff90 	bl	80014e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005cc:	f000 fc1e 	bl	8000e0c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <main+0x8c>)
 80005d8:	f000 ff86 	bl	80014e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e0:	f000 fc14 	bl	8000e0c <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)user_data, strlen(user_data));
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <main+0x84>)
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <main+0x84>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fe21 	bl	8000234 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	4621      	mov	r1, r4
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <main+0x88>)
 80005fc:	f002 fea0 	bl	8003340 <HAL_UART_Transmit_IT>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000600:	e7dc      	b.n	80005bc <main+0x3c>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	200000e4 	.word	0x200000e4
 800060c:	42020800 	.word	0x42020800

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b098      	sub	sp, #96	; 0x60
 8000614:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2248      	movs	r2, #72	; 0x48
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fe33 	bl	800528a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f001 f8d4 	bl	80017e0 <HAL_PWREx_ControlVoltageScaling>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x32>
	{
		Error_Handler();
 800063e:	f000 f92d 	bl	800089c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000650:	2303      	movs	r3, #3
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 6;
 8000654:	2306      	movs	r3, #6
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 55;
 8000658:	2337      	movs	r3, #55	; 0x37
 800065a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f947 	bl	8001900 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x6c>
	{
		Error_Handler();
 8000678:	f000 f910 	bl	800089c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	607b      	str	r3, [r7, #4]
	                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fe09 	bl	80022ac <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006a0:	f000 f8fc 	bl	800089c <Error_Handler>
	}
}
 80006a4:	bf00      	nop
 80006a6:	3760      	adds	r7, #96	; 0x60
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C2_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C2_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00A03AC8;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C2_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C2_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C2_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <MX_I2C2_Init+0x74>)
 80006e8:	f000 ff16 	bl	8001518 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80006f2:	f000 f8d3 	bl	800089c <Error_Handler>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_I2C2_Init+0x74>)
 80006fa:	f000 ff9c 	bl	8001636 <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8000704:	f000 f8ca 	bl	800089c <Error_Handler>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_I2C2_Init+0x74>)
 800070c:	f000 ffde 	bl	80016cc <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8000716:	f000 f8c1 	bl	800089c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000090 	.word	0x20000090
 8000724:	40005800 	.word	0x40005800
 8000728:	00a03ac8 	.word	0x00a03ac8

0800072c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	*/
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000730:	2000      	movs	r0, #0
 8000732:	f001 f817 	bl	8001764 <HAL_ICACHE_ConfigAssociativityMode>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 800073c:	f000 f8ae 	bl	800089c <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 8000740:	f001 f830 	bl	80017a4 <HAL_ICACHE_Enable>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 800074a:	f000 f8a7 	bl	800089c <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800075c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800079e:	f002 fd7f 	bl	80032a0 <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80007a8:	f000 f878 	bl	800089c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 80007b0:	f004 f8e7 	bl	8004982 <HAL_UARTEx_SetTxFifoThreshold>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 80007ba:	f000 f86f 	bl	800089c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 80007c2:	f004 f91c 	bl	80049fe <HAL_UARTEx_SetRxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80007cc:	f000 f866 	bl	800089c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 80007d2:	f004 f89d 	bl	8004910 <HAL_UARTEx_DisableFifoMode>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80007dc:	f000 f85e 	bl	800089c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000e4 	.word	0x200000e4
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_GPIO_Init+0xa8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_GPIO_Init+0xa8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0xa8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xac>)
 800086a:	f000 fe3d 	bl	80014e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xac>)
 8000888:	f000 fcae 	bl	80011e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	42020800 	.word	0x42020800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008de:	f000 ffdb 	bl	8001898 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0ae      	sub	sp, #184	; 0xb8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2294      	movs	r2, #148	; 0x94
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f004 fcba 	bl	800528a <memset>
  if(hi2c->Instance==I2C2)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <HAL_I2C_MspInit+0xb0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d13b      	bne.n	8000998 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000924:	2300      	movs	r3, #0
 8000926:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f001 ffa1 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000938:	f7ff ffb0 	bl	800089c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_I2C_MspInit+0xb4>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_I2C_MspInit+0xb4>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_I2C_MspInit+0xb4>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800096e:	2304      	movs	r3, #4
 8000970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000978:	4619      	mov	r1, r3
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <HAL_I2C_MspInit+0xb8>)
 800097c:	f000 fc34 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0xb4>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_I2C_MspInit+0xb4>)
 8000986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098a:	6593      	str	r3, [r2, #88]	; 0x58
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_I2C_MspInit+0xb4>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	37b8      	adds	r7, #184	; 0xb8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40005800 	.word	0x40005800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	42020400 	.word	0x42020400

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ae      	sub	sp, #184	; 0xb8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2294      	movs	r2, #148	; 0x94
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f004 fc5c 	bl	800528a <memset>
  if(huart->Instance==USART2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <HAL_UART_MspInit+0xc0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d142      	bne.n	8000a62 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009dc:	2302      	movs	r3, #2
 80009de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 ff43 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f4:	f7ff ff52 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a40:	2307      	movs	r3, #7
 8000a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 8000a4e:	f000 fbcb 	bl	80011e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	203e      	movs	r0, #62	; 0x3e
 8000a58:	f000 fad7 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5c:	203e      	movs	r0, #62	; 0x3e
 8000a5e:	f000 faee 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	37b8      	adds	r7, #184	; 0xb8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	42020000 	.word	0x42020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f982 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	f002 fcc9 	bl	8003468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000e4 	.word	0x200000e4

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f004 fc0a 	bl	8005328 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20030000 	.word	0x20030000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	20000178 	.word	0x20000178
 8000b48:	20000378 	.word	0x20000378

08000b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000b76:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d107      	bne.n	8000b92 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e005      	b.n	8000b9e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000b92:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000b9e:	4a46      	ldr	r2, [pc, #280]	; (8000cb8 <SystemCoreClockUpdate+0x148>)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba8:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b0c      	cmp	r3, #12
 8000bb2:	d866      	bhi.n	8000c82 <SystemCoreClockUpdate+0x112>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <SystemCoreClockUpdate+0x4c>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bf1 	.word	0x08000bf1
 8000bc0:	08000c83 	.word	0x08000c83
 8000bc4:	08000c83 	.word	0x08000c83
 8000bc8:	08000c83 	.word	0x08000c83
 8000bcc:	08000bf9 	.word	0x08000bf9
 8000bd0:	08000c83 	.word	0x08000c83
 8000bd4:	08000c83 	.word	0x08000c83
 8000bd8:	08000c83 	.word	0x08000c83
 8000bdc:	08000c01 	.word	0x08000c01
 8000be0:	08000c83 	.word	0x08000c83
 8000be4:	08000c83 	.word	0x08000c83
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000c09 	.word	0x08000c09
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000bf0:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	6013      	str	r3, [r2, #0]
      break;
 8000bf6:	e048      	b.n	8000c8a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000bfa:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <SystemCoreClockUpdate+0x150>)
 8000bfc:	601a      	str	r2, [r3, #0]
      break;
 8000bfe:	e044      	b.n	8000c8a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c00:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000c02:	4a30      	ldr	r2, [pc, #192]	; (8000cc4 <SystemCoreClockUpdate+0x154>)
 8000c04:	601a      	str	r2, [r3, #0]
      break;
 8000c06:	e040      	b.n	8000c8a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000c08:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d003      	beq.n	8000c2e <SystemCoreClockUpdate+0xbe>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d006      	beq.n	8000c3a <SystemCoreClockUpdate+0xca>
 8000c2c:	e00b      	b.n	8000c46 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <SystemCoreClockUpdate+0x150>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	613b      	str	r3, [r7, #16]
          break;
 8000c38:	e00b      	b.n	8000c52 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <SystemCoreClockUpdate+0x154>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	613b      	str	r3, [r7, #16]
          break;
 8000c44:	e005      	b.n	8000c52 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	613b      	str	r3, [r7, #16]
          break;
 8000c50:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0e5b      	lsrs	r3, r3, #25
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000c7e:	6013      	str	r3, [r2, #0]
      break;
 8000c80:	e003      	b.n	8000c8a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	6013      	str	r3, [r2, #0]
      break;
 8000c88:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SystemCoreClockUpdate+0x144>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <SystemCoreClockUpdate+0x158>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemCoreClockUpdate+0x14c>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	08005f34 	.word	0x08005f34
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	00f42400 	.word	0x00f42400
 8000cc4:	016e3600 	.word	0x016e3600
 8000cc8:	08005f1c 	.word	0x08005f1c

08000ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd0:	f7ff ff3c 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cd6:	e003      	b.n	8000ce0 <LoopCopyDataInit>

08000cd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cde:	3104      	adds	r1, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ce4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ce6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ce8:	d3f6      	bcc.n	8000cd8 <CopyDataInit>
	ldr	r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cec:	e002      	b.n	8000cf4 <LoopFillZerobss>

08000cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cf0:	f842 3b04 	str.w	r3, [r2], #4

08000cf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <LoopForever+0x16>)
	cmp	r2, r3
 8000cf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cf8:	d3f9      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfa:	f004 fb1b 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfe:	f7ff fc3f 	bl	8000580 <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d04:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000d08:	08005ffc 	.word	0x08005ffc
	ldr	r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d10:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000d14:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000d18:	20000378 	.word	0x20000378

08000d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_2_IRQHandler>

08000d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d28:	2004      	movs	r0, #4
 8000d2a:	f000 f963 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000d2e:	f7ff ff1f 	bl	8000b70 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	2007      	movs	r0, #7
 8000d34:	f000 f80e 	bl	8000d54 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d44:	f7ff fdb0 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d023      	beq.n	8000db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_InitTick+0x70>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f96b 	bl	800105a <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b07      	cmp	r3, #7
 8000d8e:	d809      	bhi.n	8000da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f000 f937 	bl	800100a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e004      	b.n	8000db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	2000017c 	.word	0x2000017c

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	2000017c 	.word	0x2000017c

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0152      	lsls	r2, r2, #5
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0152      	lsls	r2, r2, #5
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	bf28      	it	cs
 8000f66:	2303      	movcs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b04      	subs	r3, #4
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	2107      	movs	r1, #7
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff40 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa4 	bl	8000fb0 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e040      	b.n	800111e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020e 	bic.w	r2, r2, #14
 80010aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f003 021c 	and.w	r2, r3, #28
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80010e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00c      	beq.n	800110c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001100:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800110a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d005      	beq.n	800114e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2204      	movs	r2, #4
 8001146:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e047      	b.n	80011de <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 020e 	bic.w	r2, r2, #14
 800115c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0201 	bic.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800117c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 021c 	and.w	r2, r3, #28
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800119a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00c      	beq.n	80011be <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80011bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	4798      	blx	r3
    }
  }
  return status;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011f6:	e158      	b.n	80014aa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 814a 	beq.w	80014a4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 0201 	and.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0203 	and.w	r2, r3, #3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a4 	beq.w	80014a4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800135c:	4a5a      	ldr	r2, [pc, #360]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3318      	adds	r3, #24
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a52      	ldr	r2, [pc, #328]	; (80014cc <HAL_GPIO_Init+0x2e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d025      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a51      	ldr	r2, [pc, #324]	; (80014d0 <HAL_GPIO_Init+0x2e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d01f      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a50      	ldr	r2, [pc, #320]	; (80014d4 <HAL_GPIO_Init+0x2ec>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d019      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <HAL_GPIO_Init+0x2f0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d013      	beq.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <HAL_GPIO_Init+0x2f4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d00d      	beq.n	80013c4 <HAL_GPIO_Init+0x1dc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4d      	ldr	r2, [pc, #308]	; (80014e0 <HAL_GPIO_Init+0x2f8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d007      	beq.n	80013c0 <HAL_GPIO_Init+0x1d8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_GPIO_Init+0x2fc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_GPIO_Init+0x1d4>
 80013b8:	2306      	movs	r3, #6
 80013ba:	e00c      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013bc:	2307      	movs	r3, #7
 80013be:	e00a      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c0:	2305      	movs	r3, #5
 80013c2:	e008      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	4093      	lsls	r3, r2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80013e6:	4938      	ldr	r1, [pc, #224]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3318      	adds	r3, #24
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001418:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 800144a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146e:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 8001478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_GPIO_Init+0x2e0>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f ae9f 	bne.w	80011f8 <HAL_GPIO_Init+0x10>
  }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	4002f400 	.word	0x4002f400
 80014cc:	42020000 	.word	0x42020000
 80014d0:	42020400 	.word	0x42020400
 80014d4:	42020800 	.word	0x42020800
 80014d8:	42020c00 	.word	0x42020c00
 80014dc:	42021000 	.word	0x42021000
 80014e0:	42021400 	.word	0x42021400
 80014e4:	42021800 	.word	0x42021800

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001504:	e002      	b.n	800150c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e081      	b.n	800162e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff f9d6 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	; 0x24
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001568:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001578:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d107      	bne.n	8001592 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	e006      	b.n	80015a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800159e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d104      	bne.n	80015b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69d9      	ldr	r1, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b20      	cmp	r3, #32
 800164a:	d138      	bne.n	80016be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001656:	2302      	movs	r3, #2
 8001658:	e032      	b.n	80016c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2224      	movs	r2, #36	; 0x24
 8001666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0201 	bic.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001688:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2220      	movs	r2, #32
 80016ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016be:	2302      	movs	r3, #2
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b20      	cmp	r3, #32
 80016e0:	d139      	bne.n	8001756 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e033      	b.n	8001758 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2224      	movs	r2, #36	; 0x24
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800171e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e007      	b.n	8001792 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0204 	bic.w	r2, r3, #4
 800178a:	4905      	ldr	r1, [pc, #20]	; (80017a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40030400 	.word	0x40030400

080017a4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_ICACHE_Enable+0x1c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_ICACHE_Enable+0x1c>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40030400 	.word	0x40030400

080017c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_PWREx_GetVoltageRange+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40007000 	.word	0x40007000

080017e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80017f2:	f000 f861 	bl	80018b8 <HAL_PWREx_SMPS_GetEffectiveMode>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fc:	d101      	bne.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e03e      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800180e:	d101      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e035      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	d101      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	e02f      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	09db      	lsrs	r3, r3, #7
 800183e:	2232      	movs	r2, #50	; 0x32
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	3301      	adds	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001850:	e002      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3b01      	subs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001864:	d102      	bne.n	800186c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f2      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001878:	d101      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e000      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40007000 	.word	0x40007000
 800188c:	20000004 	.word	0x20000004
 8001890:	0a7c5ac5 	.word	0x0a7c5ac5
 8001894:	cccccccd 	.word	0xcccccccd

08001898 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a6:	6093      	str	r3, [r2, #8]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	e00a      	b.n	80018ec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80018e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	e001      	b.n	80018ec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	f000 bcc2 	b.w	8002298 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001914:	4b99      	ldr	r3, [pc, #612]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800191e:	4b97      	ldr	r3, [pc, #604]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80e9 	beq.w	8001b08 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_RCC_OscConfig+0x4a>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	f040 8083 	bne.w	8001a4a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d17f      	bne.n	8001a4a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194a:	4b8c      	ldr	r3, [pc, #560]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <HAL_RCC_OscConfig+0x64>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	f000 bc9a 	b.w	8002298 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_RCC_OscConfig+0x7e>
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800197c:	e005      	b.n	800198a <HAL_RCC_OscConfig+0x8a>
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198a:	4293      	cmp	r3, r2
 800198c:	d224      	bcs.n	80019d8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fe9c 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	f000 bc7a 	b.w	8002298 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b75      	ldr	r3, [pc, #468]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a74      	ldr	r2, [pc, #464]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	496f      	ldr	r1, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	496a      	ldr	r1, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e026      	b.n	8001a26 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a67      	ldr	r2, [pc, #412]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	4962      	ldr	r1, [pc, #392]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f6:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	495d      	ldr	r1, [pc, #372]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fe5b 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f000 bc39 	b.w	8002298 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a26:	f000 fe17 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a54      	ldr	r2, [pc, #336]	; (8001b80 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a30:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <HAL_RCC_OscConfig+0x284>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f98d 	bl	8000d54 <HAL_InitTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d060      	beq.n	8001b06 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	f000 bc27 	b.w	8002298 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d039      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a52:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f9c9 	bl	8000df4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a64:	e00f      	b.n	8001a86 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a66:	f7ff f9c5 	bl	8000df4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d908      	bls.n	8001a86 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f000 bc09 	b.w	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0e9      	beq.n	8001a66 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a39      	ldr	r2, [pc, #228]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	4934      	ldr	r1, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	492f      	ldr	r1, [pc, #188]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e020      	b.n	8001b08 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f98f 	bl	8000df4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad8:	e00e      	b.n	8001af8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ada:	f7ff f98b 	bl	8000df4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d907      	bls.n	8001af8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e3cf      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ea      	bne.n	8001ada <HAL_RCC_OscConfig+0x1da>
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d07e      	beq.n	8001c12 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x226>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d10e      	bne.n	8001b3e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d10b      	bne.n	8001b3e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06e      	beq.n	8001c10 <HAL_RCC_OscConfig+0x310>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d16a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e3ac      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x256>
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e024      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2a0>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_OscConfig+0x288>
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a02      	ldr	r2, [pc, #8]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e012      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2a0>
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	20000004 	.word	0x20000004
 8001b84:	20000008 	.word	0x20000008
 8001b88:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a8a      	ldr	r2, [pc, #552]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a87      	ldr	r2, [pc, #540]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d019      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f924 	bl	8000df4 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	e00e      	b.n	8001bce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f920 	bl	8000df4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d907      	bls.n	8001bce <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e364      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ea      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2b0>
 8001bda:	e01a      	b.n	8001c12 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f90a 	bl	8000df4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	e00e      	b.n	8001c02 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f906 	bl	8000df4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d907      	bls.n	8001c02 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e34a      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ea      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2e4>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x330>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x348>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e327      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4958      	ldr	r1, [pc, #352]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e04c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d029      	beq.n	8001cba <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f8bf 	bl	8000df4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e00e      	b.n	8001c98 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f8bb 	bl	8000df4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d907      	bls.n	8001c98 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c88:	4b4b      	ldr	r3, [pc, #300]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2ff      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c98:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ea      	beq.n	8001c7a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	4941      	ldr	r1, [pc, #260]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e01e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a3e      	ldr	r2, [pc, #248]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f895 	bl	8000df4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff f891 	bl	8000df4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d907      	bls.n	8001cec <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e2d5      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ea      	bne.n	8001cce <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d062      	beq.n	8001dca <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d038      	beq.n	8001d7e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d1c:	f023 0310 	bic.w	r3, r3, #16
 8001d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d24:	e007      	b.n	8001d36 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2c:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d46:	f7ff f855 	bl	8000df4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4c:	e00f      	b.n	8001d6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f851 	bl	8000df4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b07      	cmp	r3, #7
 8001d5a:	d908      	bls.n	8001d6e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e294      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0e8      	beq.n	8001d4e <HAL_RCC_OscConfig+0x44e>
 8001d7c:	e025      	b.n	8001dca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f831 	bl	8000df4 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	e012      	b.n	8001dbc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f82d 	bl	8000df4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b07      	cmp	r3, #7
 8001da2:	d90b      	bls.n	8001dbc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_RCC_OscConfig+0x4b8>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e270      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dbc:	4ba8      	ldr	r3, [pc, #672]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1e5      	bne.n	8001d96 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 812d 	beq.w	8002032 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ddc:	4ba0      	ldr	r3, [pc, #640]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	4b9d      	ldr	r3, [pc, #628]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	4a9c      	ldr	r2, [pc, #624]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6593      	str	r3, [r2, #88]	; 0x58
 8001df4:	4b9a      	ldr	r3, [pc, #616]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e00:	2301      	movs	r3, #1
 8001e02:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e04:	4b97      	ldr	r3, [pc, #604]	; (8002064 <HAL_RCC_OscConfig+0x764>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11e      	bne.n	8001e4e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e10:	4b94      	ldr	r3, [pc, #592]	; (8002064 <HAL_RCC_OscConfig+0x764>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a93      	ldr	r2, [pc, #588]	; (8002064 <HAL_RCC_OscConfig+0x764>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1c:	f7fe ffea 	bl	8000df4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e22:	e00e      	b.n	8001e42 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e24:	f7fe ffe6 	bl	8000df4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d907      	bls.n	8001e42 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e32:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x764>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e22a      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e42:	4b88      	ldr	r3, [pc, #544]	; (8002064 <HAL_RCC_OscConfig+0x764>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ea      	beq.n	8001e24 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01f      	beq.n	8001e9a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d010      	beq.n	8001e88 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e66:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	4a7c      	ldr	r2, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e76:	4b7a      	ldr	r3, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	4a78      	ldr	r2, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e88:	4b75      	ldr	r3, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	4a74      	ldr	r2, [pc, #464]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e98:	e00f      	b.n	8001eba <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e9a:	4b71      	ldr	r3, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d068      	beq.n	8001f94 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ff97 	bl	8000df4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec8:	e011      	b.n	8001eee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe ff93 	bl	8000df4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d908      	bls.n	8001eee <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001edc:	4b60      	ldr	r3, [pc, #384]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1d4      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0e6      	beq.n	8001eca <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d022      	beq.n	8001f4e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f08:	4b55      	ldr	r3, [pc, #340]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f18:	e011      	b.n	8001f3e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ff6b 	bl	8000df4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d908      	bls.n	8001f3e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1ac      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f3e:	4b48      	ldr	r3, [pc, #288]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0e6      	beq.n	8001f1a <HAL_RCC_OscConfig+0x61a>
 8001f4c:	e068      	b.n	8002020 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f5e:	e011      	b.n	8001f84 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe ff48 	bl	8000df4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d908      	bls.n	8001f84 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e189      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1e6      	bne.n	8001f60 <HAL_RCC_OscConfig+0x660>
 8001f92:	e045      	b.n	8002020 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7fe ff2e 	bl	8000df4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9a:	e011      	b.n	8001fc0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7fe ff2a 	bl	8000df4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e16b      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e6      	bne.n	8001f9c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d021      	beq.n	8002020 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8001fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fec:	e011      	b.n	8002012 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe ff01 	bl	8000df4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d908      	bls.n	8002012 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e142      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e6      	bne.n	8001fee <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002020:	7ffb      	ldrb	r3, [r7, #31]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d04f      	beq.n	80020de <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	d028      	beq.n	8002098 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 8002048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_RCC_OscConfig+0x760>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7fe fecd 	bl	8000df4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x788>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002068:	f7fe fec4 	bl	8000df4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d908      	bls.n	8002088 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002076:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e107      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002088:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0e8      	beq.n	8002068 <HAL_RCC_OscConfig+0x768>
 8002096:	e022      	b.n	80020de <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002098:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 800209a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800209e:	4a80      	ldr	r2, [pc, #512]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe fea4 	bl	8000df4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b0:	f7fe fea0 	bl	8000df4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020be:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80020c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0e3      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d0:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80020d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e8      	bne.n	80020b0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80d7 	beq.w	8002296 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	f000 8091 	beq.w	8002218 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d166      	bne.n	80021cc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a67      	ldr	r2, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe fe73 	bl	8000df4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fe6f 	bl	8000df4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d907      	bls.n	8002130 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0b3      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ea      	bne.n	8002112 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <HAL_RCC_OscConfig+0x9a4>)
 8002142:	4013      	ands	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800214c:	3a01      	subs	r2, #1
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002156:	0212      	lsls	r2, r2, #8
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800215e:	0852      	lsrs	r2, r2, #1
 8002160:	3a01      	subs	r2, #1
 8002162:	0552      	lsls	r2, r2, #21
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800216a:	0852      	lsrs	r2, r2, #1
 800216c:	3a01      	subs	r2, #1
 800216e:	0652      	lsls	r2, r2, #25
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002176:	06d2      	lsls	r2, r2, #27
 8002178:	430a      	orrs	r2, r1
 800217a:	4949      	ldr	r1, [pc, #292]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800218c:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a43      	ldr	r2, [pc, #268]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fe2c 	bl	8000df4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	e00e      	b.n	80021be <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fe28 	bl	8000df4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d907      	bls.n	80021be <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e06c      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ea      	beq.n	80021a0 <HAL_RCC_OscConfig+0x8a0>
 80021ca:	e064      	b.n	8002296 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe0c 	bl	8000df4 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021de:	e00e      	b.n	80021fe <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fe08 	bl	8000df4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d907      	bls.n	80021fe <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e04c      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ea      	bne.n	80021e0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4924      	ldr	r1, [pc, #144]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_OscConfig+0x9a8>)
 8002212:	4013      	ands	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
 8002216:	e03e      	b.n	8002296 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e039      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_OscConfig+0x9a0>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	429a      	cmp	r2, r3
 8002236:	d12c      	bne.n	8002292 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	3b01      	subs	r3, #1
 8002244:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d123      	bne.n	8002292 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d11b      	bne.n	8002292 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d113      	bne.n	8002292 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d109      	bne.n	8002292 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	019f800c 	.word	0x019f800c
 80022a8:	feeefffc 	.word	0xfeeefffc

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e11c      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b90      	ldr	r3, [pc, #576]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b8d      	ldr	r3, [pc, #564]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 020f 	bic.w	r2, r3, #15
 80022da:	498b      	ldr	r1, [pc, #556]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e104      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b81      	ldr	r3, [pc, #516]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230c:	429a      	cmp	r2, r3
 800230e:	d908      	bls.n	8002322 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b7e      	ldr	r3, [pc, #504]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	497b      	ldr	r1, [pc, #492]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8085 	beq.w	800243a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d11f      	bne.n	8002378 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002338:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0da      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002348:	f000 fa26 	bl	8002798 <RCC_GetSysClockFreqFromPLLSource>
 800234c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4a6f      	ldr	r2, [pc, #444]	; (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d947      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d141      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800236a:	4a68      	ldr	r2, [pc, #416]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800236c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002370:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e036      	b.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002380:	4b62      	ldr	r3, [pc, #392]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d115      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b6      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002398:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0aa      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a8:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0a2      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023b8:	f000 f8b0 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4a53      	ldr	r2, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x264>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d90f      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023c6:	4b51      	ldr	r3, [pc, #324]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023da:	4a4c      	ldr	r2, [pc, #304]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4946      	ldr	r1, [pc, #280]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7fe fcfc 	bl	8000df4 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e013      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7fe fcf8 	bl	8000df4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d90a      	bls.n	8002428 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b3e      	ldr	r3, [pc, #248]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e06a      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 020c 	and.w	r2, r3, #12
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	429a      	cmp	r2, r3
 8002438:	d1e2      	bne.n	8002400 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d105      	bne.n	800244c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002440:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d010      	beq.n	800247a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002464:	429a      	cmp	r2, r3
 8002466:	d208      	bcs.n	800247a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4925      	ldr	r1, [pc, #148]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d210      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 020f 	bic.w	r2, r3, #15
 8002490:	491d      	ldr	r1, [pc, #116]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e029      	b.n	80024fe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4912      	ldr	r1, [pc, #72]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024e8:	f000 f8b6 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x268>)
 80024f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fc2c 	bl	8000d54 <HAL_InitTick>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
 8002510:	04c4b400 	.word	0x04c4b400
 8002514:	20000004 	.word	0x20000004
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x34>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d121      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11e      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800255c:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e005      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002578:	4a34      	ldr	r2, [pc, #208]	; (800264c <HAL_RCC_GetSysClockFreq+0x130>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d102      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002594:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCC_GetSysClockFreq+0x134>)
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e004      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_RCC_GetSysClockFreq+0x138>)
 80025a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d146      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3301      	adds	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d003      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0xb4>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d00d      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0xce>
 80025ce:	e019      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d0:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_RCC_GetSysClockFreq+0x134>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025da:	68d2      	ldr	r2, [r2, #12]
 80025dc:	0a12      	lsrs	r2, r2, #8
 80025de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
        break;
 80025e8:	e019      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025f4:	68d2      	ldr	r2, [r2, #12]
 80025f6:	0a12      	lsrs	r2, r2, #8
 80025f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
        break;
 8002602:	e00c      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 800260e:	68d2      	ldr	r2, [r2, #12]
 8002610:	0a12      	lsrs	r2, r2, #8
 8002612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
        break;
 800261c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	0e5b      	lsrs	r3, r3, #25
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	3301      	adds	r3, #1
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002638:	69bb      	ldr	r3, [r7, #24]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	08005f34 	.word	0x08005f34
 8002650:	00f42400 	.word	0x00f42400
 8002654:	016e3600 	.word	0x016e3600

08002658 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800265c:	f7ff ff5e 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_GetHCLKFreq+0x20>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	4903      	ldr	r1, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08005f1c 	.word	0x08005f1c

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff ffe8 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08005f2c 	.word	0x08005f2c

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffd4 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08005f2c 	.word	0x08005f2c

080026d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f86c 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
 80026ec:	6138      	str	r0, [r7, #16]
 80026ee:	e014      	b.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002708:	f7ff f85c 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
 800270c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002726:	d10b      	bne.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	d919      	bls.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2ba0      	cmp	r3, #160	; 0xa0
 8002732:	d902      	bls.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002734:	2302      	movs	r3, #2
 8002736:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002738:	e013      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800273a:	2301      	movs	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800273e:	e010      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b80      	cmp	r3, #128	; 0x80
 8002744:	d902      	bls.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002746:	2303      	movs	r3, #3
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e00a      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d102      	bne.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002752:	2302      	movs	r3, #2
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e004      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b70      	cmp	r3, #112	; 0x70
 800275c:	d101      	bne.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275e:	2301      	movs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 020f 	bic.w	r2, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a8:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3301      	adds	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d015      	beq.n	80027e8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d839      	bhi.n	8002836 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d01c      	beq.n	8002802 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d133      	bne.n	8002836 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ce:	4a26      	ldr	r2, [pc, #152]	; (8002868 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4a23      	ldr	r2, [pc, #140]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027d8:	68d2      	ldr	r2, [r2, #12]
 80027da:	0a12      	lsrs	r2, r2, #8
 80027dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	613b      	str	r3, [r7, #16]
      break;
 80027e6:	e029      	b.n	800283c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027f2:	68d2      	ldr	r2, [r2, #12]
 80027f4:	0a12      	lsrs	r2, r2, #8
 80027f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	e01c      	b.n	800283c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e005      	b.n	800282a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	613b      	str	r3, [r7, #16]
        break;
 8002834:	e002      	b.n	800283c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
      break;
 800283a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0e5b      	lsrs	r3, r3, #25
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	3301      	adds	r3, #1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002856:	683b      	ldr	r3, [r7, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000
 8002868:	00f42400 	.word	0x00f42400
 800286c:	016e3600 	.word	0x016e3600
 8002870:	08005f34 	.word	0x08005f34

08002874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800287c:	2300      	movs	r3, #0
 800287e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002880:	2300      	movs	r3, #0
 8002882:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	d040      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d02a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d825      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d026      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d821      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d006      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d81d      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d010      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80028b4:	e018      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b6:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a8e      	ldr	r2, [pc, #568]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028c2:	e015      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fb56 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028d4:	e00c      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3320      	adds	r3, #32
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fc33 	bl	8003148 <RCCEx_PLLSAI2_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028e6:	e003      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	77fb      	strb	r3, [r7, #31]
        break;
 80028ec:	e000      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80028ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f6:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	497b      	ldr	r1, [pc, #492]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800290c:	e001      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d047      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d030      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d82a      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800292e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002932:	d02a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002938:	d824      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800293a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293e:	d008      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002944:	d81e      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800294a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294e:	d010      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002950:	e018      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002952:	4b68      	ldr	r3, [pc, #416]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800295e:	e015      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fb08 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002970:	e00c      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3320      	adds	r3, #32
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fbe5 	bl	8003148 <RCCEx_PLLSAI2_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002982:	e003      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	77fb      	strb	r3, [r7, #31]
        break;
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800298a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800298c:	7ffb      	ldrb	r3, [r7, #31]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002992:	4b58      	ldr	r3, [pc, #352]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002994:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4954      	ldr	r1, [pc, #336]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029a8:	e001      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
 80029ac:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80ab 	beq.w	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c0:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10d      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	4a48      	ldr	r2, [pc, #288]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d6:	6593      	str	r3, [r2, #88]	; 0x58
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f4:	f7fe f9fe 	bl	8000df4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fa:	e00f      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe f9fa 	bl	8000df4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d908      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8002a1a:	e006      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0e9      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8002a2a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8002a2c:	7ffb      	ldrb	r3, [r7, #31]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d164      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a32:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d019      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a50:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01f      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe f9b1 	bl	8000df4 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a94:	e012      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe f9ad 	bl	8000df4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d909      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8002aba:	e007      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0e5      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8002acc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aec:	e008      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aee:	7ffb      	ldrb	r3, [r7, #31]
 8002af0:	77bb      	strb	r3, [r7, #30]
 8002af2:	e005      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
 8002afe:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b9c      	ldr	r3, [pc, #624]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a9b      	ldr	r2, [pc, #620]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1e:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f023 0203 	bic.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	4992      	ldr	r1, [pc, #584]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b40:	4b8d      	ldr	r3, [pc, #564]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 020c 	bic.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	498a      	ldr	r1, [pc, #552]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b62:	4b85      	ldr	r3, [pc, #532]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	4981      	ldr	r1, [pc, #516]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b84:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4979      	ldr	r1, [pc, #484]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba6:	4b74      	ldr	r3, [pc, #464]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	4970      	ldr	r1, [pc, #448]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc8:	4b6b      	ldr	r3, [pc, #428]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	4968      	ldr	r1, [pc, #416]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	495f      	ldr	r1, [pc, #380]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	4957      	ldr	r1, [pc, #348]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002c2e:	4b52      	ldr	r3, [pc, #328]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3c:	494e      	ldr	r1, [pc, #312]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d031      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c58:	d00e      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c5e:	d814      	bhi.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6a:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a42      	ldr	r2, [pc, #264]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c74:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002c76:	e00c      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f97c 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002c88:	e003      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	77fb      	strb	r3, [r7, #31]
        break;
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8002c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c92:	7ffb      	ldrb	r3, [r7, #31]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cae:	e001      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7ffb      	ldrb	r3, [r7, #31]
 8002cb2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	492a      	ldr	r1, [pc, #168]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	4921      	ldr	r1, [pc, #132]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	4919      	ldr	r1, [pc, #100]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d2c:	f023 0203 	bic.w	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4910      	ldr	r1, [pc, #64]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	4908      	ldr	r1, [pc, #32]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d66:	d109      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a02      	ldr	r2, [pc, #8]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
 8002d74:	e014      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f8f5 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
 8002d9e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d04a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db4:	d108      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002db6:	4b70      	ldr	r3, [pc, #448]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dbc:	4a6e      	ldr	r2, [pc, #440]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dc6:	e012      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002dc8:	4b6b      	ldr	r3, [pc, #428]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd6:	4968      	ldr	r1, [pc, #416]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dde:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002de4:	4a64      	ldr	r2, [pc, #400]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df6:	d10d      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f8bc 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d019      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
 8002e10:	77bb      	strb	r3, [r7, #30]
 8002e12:	e016      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e1e:	4b56      	ldr	r3, [pc, #344]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a55      	ldr	r2, [pc, #340]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e28:	60d3      	str	r3, [r2, #12]
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e34:	d105      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e36:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4a4f      	ldr	r2, [pc, #316]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5c:	4946      	ldr	r1, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6e:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e78:	60d3      	str	r3, [r2, #12]
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f875 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e96:	7ffb      	ldrb	r3, [r7, #31]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
 8002e9e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eac:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ebc:	492e      	ldr	r1, [pc, #184]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ece:	d10c      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f850 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002ee0:	7ffb      	ldrb	r3, [r7, #31]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002ee6:	7ffb      	ldrb	r3, [r7, #31]
 8002ee8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002efc:	f023 0204 	bic.w	r2, r3, #4
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	491c      	ldr	r1, [pc, #112]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f20:	f023 0218 	bic.w	r2, r3, #24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4913      	ldr	r1, [pc, #76]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d017      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f60:	d105      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002f6e:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d018      	beq.n	8002fc4 <RCCEx_PLLSAI1_Config+0x48>
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d81f      	bhi.n	8002fd6 <RCCEx_PLLSAI1_Config+0x5a>
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d002      	beq.n	8002fa0 <RCCEx_PLLSAI1_Config+0x24>
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d009      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x36>
 8002f9e:	e01a      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa0:	4b65      	ldr	r3, [pc, #404]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d117      	bne.n	8002fdc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb0:	e014      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d110      	bne.n	8002fe0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e00d      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002fc4:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd4:	e006      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fda:	e004      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002fdc:	bf00      	nop
 8002fde:	e002      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002fe4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 809f 	bne.w	800312c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fee:	4b52      	ldr	r3, [pc, #328]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a51      	ldr	r2, [pc, #324]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fd fefb 	bl	8000df4 <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003000:	e00f      	b.n	8003022 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003002:	f7fd fef7 	bl	8000df4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d908      	bls.n	8003022 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003010:	4b49      	ldr	r3, [pc, #292]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003020:	e006      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003022:	4b45      	ldr	r3, [pc, #276]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e9      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0x86>
 800302e:	e000      	b.n	8003032 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003030:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d179      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	4b3e      	ldr	r3, [pc, #248]	; (800313c <RCCEx_PLLSAI1_Config+0x1c0>)
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	0211      	lsls	r1, r2, #8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68d2      	ldr	r2, [r2, #12]
 8003050:	06d2      	lsls	r2, r2, #27
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6852      	ldr	r2, [r2, #4]
 8003058:	3a01      	subs	r2, #1
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	4934      	ldr	r1, [pc, #208]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
 800306a:	e033      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d118      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	4b32      	ldr	r3, [pc, #200]	; (8003140 <RCCEx_PLLSAI1_Config+0x1c4>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6892      	ldr	r2, [r2, #8]
 800307e:	0211      	lsls	r1, r2, #8
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6912      	ldr	r2, [r2, #16]
 8003084:	0852      	lsrs	r2, r2, #1
 8003086:	3a01      	subs	r2, #1
 8003088:	0552      	lsls	r2, r2, #21
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6852      	ldr	r2, [r2, #4]
 8003090:	3a01      	subs	r2, #1
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	4926      	ldr	r1, [pc, #152]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
 80030a2:	e017      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <RCCEx_PLLSAI1_Config+0x1c8>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	0211      	lsls	r1, r2, #8
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6952      	ldr	r2, [r2, #20]
 80030b6:	0852      	lsrs	r2, r2, #1
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0652      	lsls	r2, r2, #25
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6852      	ldr	r2, [r2, #4]
 80030c2:	3a01      	subs	r2, #1
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	491a      	ldr	r1, [pc, #104]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a17      	ldr	r2, [pc, #92]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 80030da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd fe88 	bl	8000df4 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030e6:	e00f      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e8:	f7fd fe84 	bl	8000df4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d908      	bls.n	8003108 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003106:	e006      	b.n	8003116 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0e9      	beq.n	80030e8 <RCCEx_PLLSAI1_Config+0x16c>
 8003114:	e000      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8003116:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4904      	ldr	r1, [pc, #16]	; (8003138 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	07ff800c 	.word	0x07ff800c
 8003140:	ff9f800c 	.word	0xff9f800c
 8003144:	f9ff800c 	.word	0xf9ff800c

08003148 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d018      	beq.n	8003190 <RCCEx_PLLSAI2_Config+0x48>
 800315e:	2b03      	cmp	r3, #3
 8003160:	d81f      	bhi.n	80031a2 <RCCEx_PLLSAI2_Config+0x5a>
 8003162:	2b01      	cmp	r3, #1
 8003164:	d002      	beq.n	800316c <RCCEx_PLLSAI2_Config+0x24>
 8003166:	2b02      	cmp	r3, #2
 8003168:	d009      	beq.n	800317e <RCCEx_PLLSAI2_Config+0x36>
 800316a:	e01a      	b.n	80031a2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800316c:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d117      	bne.n	80031a8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317c:	e014      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d110      	bne.n	80031ac <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e00d      	b.n	80031ac <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003190:	4b41      	ldr	r3, [pc, #260]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e006      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      break;
 80031a6:	e004      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80031b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d169      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031b8:	4b37      	ldr	r3, [pc, #220]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a36      	ldr	r2, [pc, #216]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fd fe16 	bl	8000df4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ca:	e00f      	b.n	80031ec <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031cc:	f7fd fe12 	bl	8000df4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d908      	bls.n	80031ec <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031da:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ea:	e006      	b.n	80031fa <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ec:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e9      	bne.n	80031cc <RCCEx_PLLSAI2_Config+0x84>
 80031f8:	e000      	b.n	80031fc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80031fa:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d144      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d115      	bne.n	8003234 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	4b23      	ldr	r3, [pc, #140]	; (800329c <RCCEx_PLLSAI2_Config+0x154>)
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6892      	ldr	r2, [r2, #8]
 8003214:	0211      	lsls	r1, r2, #8
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	06d2      	lsls	r2, r2, #27
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6852      	ldr	r2, [r2, #4]
 8003222:	3a01      	subs	r2, #1
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	491a      	ldr	r1, [pc, #104]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003230:	4313      	orrs	r3, r2
 8003232:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a17      	ldr	r2, [pc, #92]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fd fdd8 	bl	8000df4 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003246:	e00f      	b.n	8003268 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003248:	f7fd fdd4 	bl	8000df4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d908      	bls.n	8003268 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003266:	e006      	b.n	8003276 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0e9      	beq.n	8003248 <RCCEx_PLLSAI2_Config+0x100>
 8003274:	e000      	b.n	8003278 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8003276:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	4904      	ldr	r1, [pc, #16]	; (8003298 <RCCEx_PLLSAI2_Config+0x150>)
 8003288:	4313      	orrs	r3, r2
 800328a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	07ff800c 	.word	0x07ff800c

080032a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e042      	b.n	8003338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fd fb71 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2224      	movs	r2, #36	; 0x24
 80032ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fbfa 	bl	8003adc <UART_SetConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 feee 	bl	80040dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 ff75 	bl	8004220 <UART_CheckIdleState>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003340:	b480      	push	{r7}
 8003342:	b091      	sub	sp, #68	; 0x44
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	2b20      	cmp	r3, #32
 8003356:	d178      	bne.n	800344a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Transmit_IT+0x24>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e071      	b.n	800344c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	88fa      	ldrh	r2, [r7, #6]
 8003372:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	88fa      	ldrh	r2, [r7, #6]
 800337a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2221      	movs	r2, #33	; 0x21
 8003390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339c:	d12a      	bne.n	80033f4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a6:	d107      	bne.n	80033b8 <HAL_UART_Transmit_IT+0x78>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a29      	ldr	r2, [pc, #164]	; (8003458 <HAL_UART_Transmit_IT+0x118>)
 80033b4:	679a      	str	r2, [r3, #120]	; 0x78
 80033b6:	e002      	b.n	80033be <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_UART_Transmit_IT+0x11c>)
 80033bc:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3308      	adds	r3, #8
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3308      	adds	r3, #8
 80033dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033de:	637a      	str	r2, [r7, #52]	; 0x34
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e5      	bne.n	80033be <HAL_UART_Transmit_IT+0x7e>
 80033f2:	e028      	b.n	8003446 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d107      	bne.n	800340e <HAL_UART_Transmit_IT+0xce>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_UART_Transmit_IT+0x120>)
 800340a:	679a      	str	r2, [r3, #120]	; 0x78
 800340c:	e002      	b.n	8003414 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_UART_Transmit_IT+0x124>)
 8003412:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	613b      	str	r3, [r7, #16]
   return(result);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	69f9      	ldr	r1, [r7, #28]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e6      	bne.n	8003414 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3744      	adds	r7, #68	; 0x44
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	08004795 	.word	0x08004795
 800345c:	080046b5 	.word	0x080046b5
 8003460:	080045f3 	.word	0x080045f3
 8003464:	0800453b 	.word	0x0800453b

08003468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b0ba      	sub	sp, #232	; 0xe8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800348e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003492:	f640 030f 	movw	r3, #2063	; 0x80f
 8003496:	4013      	ands	r3, r2
 8003498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800349c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d11b      	bne.n	80034dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d009      	beq.n	80034dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 82e3 	beq.w	8003a98 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
      }
      return;
 80034da:	e2dd      	b.n	8003a98 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8123 	beq.w	800372c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80034ea:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <HAL_UART_IRQHandler+0x2b8>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034f6:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <HAL_UART_IRQHandler+0x2bc>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8116 	beq.w	800372c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d011      	beq.n	8003530 <HAL_UART_IRQHandler+0xc8>
 800350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d011      	beq.n	8003560 <HAL_UART_IRQHandler+0xf8>
 800353c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2202      	movs	r2, #2
 800354e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d011      	beq.n	8003590 <HAL_UART_IRQHandler+0x128>
 800356c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2204      	movs	r2, #4
 800357e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f043 0202 	orr.w	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80035a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80035ac:	4b5c      	ldr	r3, [pc, #368]	; (8003720 <HAL_UART_IRQHandler+0x2b8>)
 80035ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <HAL_UART_IRQHandler+0x196>
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00c      	beq.n	80035fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8249 	beq.w	8003a9c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800360a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d013      	beq.n	800363e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800365a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800365e:	2b00      	cmp	r3, #0
 8003660:	d054      	beq.n	800370c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 feed 	bl	8004442 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d146      	bne.n	8003704 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3308      	adds	r3, #8
 800367c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800368c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1d9      	bne.n	8003676 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d017      	beq.n	80036fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <HAL_UART_IRQHandler+0x2c0>)
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fd24 	bl	800112a <HAL_DMA_Abort_IT>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d019      	beq.n	800371c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80036f6:	4610      	mov	r0, r2
 80036f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	e00f      	b.n	800371c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f9d7 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003702:	e00b      	b.n	800371c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9d3 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	e007      	b.n	800371c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f9cf 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800371a:	e1bf      	b.n	8003a9c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	bf00      	nop
    return;
 800371e:	e1bd      	b.n	8003a9c <HAL_UART_IRQHandler+0x634>
 8003720:	10000001 	.word	0x10000001
 8003724:	04000120 	.word	0x04000120
 8003728:	0800450f 	.word	0x0800450f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003730:	2b01      	cmp	r3, #1
 8003732:	f040 8153 	bne.w	80039dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 814c 	beq.w	80039dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8145 	beq.w	80039dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2210      	movs	r2, #16
 8003758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	f040 80bb 	bne.w	80038e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 818f 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003788:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800378c:	429a      	cmp	r2, r3
 800378e:	f080 8187 	bcs.w	8003aa0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 8087 	bne.w	80038be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1da      	bne.n	80037b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3308      	adds	r3, #8
 8003800:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800380a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800381e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003822:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e1      	bne.n	80037fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800385a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800385c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003860:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e3      	bne.n	8003836 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388c:	f023 0310 	bic.w	r3, r3, #16
 8003890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800389e:	65bb      	str	r3, [r7, #88]	; 0x58
 80038a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e4      	bne.n	800387c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fbda 	bl	8001072 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8f3 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038de:	e0df      	b.n	8003aa0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80d1 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80cc 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800391a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
 8003930:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e4      	bne.n	800390c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3308      	adds	r3, #8
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	623b      	str	r3, [r7, #32]
   return(result);
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800396a:	633a      	str	r2, [r7, #48]	; 0x30
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e1      	bne.n	8003942 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	617b      	str	r3, [r7, #20]
   return(result);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e4      	bne.n	8003992 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f875 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039da:	e063      	b.n	8003aa4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <HAL_UART_IRQHandler+0x59e>
 80039e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 ff68 	bl	80048d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a04:	e051      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03a      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
    }
    return;
 8003a3a:	e035      	b.n	8003aa8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <HAL_UART_IRQHandler+0x5f4>
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 ff12 	bl	800487e <UART_EndTransmit_IT>
    return;
 8003a5a:	e026      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_UART_IRQHandler+0x614>
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 ff41 	bl	80048fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a7a:	e016      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d010      	beq.n	8003aaa <HAL_UART_IRQHandler+0x642>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0c      	bge.n	8003aaa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 ff29 	bl	80048e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a96:	e008      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
      return;
 8003a98:	bf00      	nop
 8003a9a:	e006      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
    return;
 8003a9c:	bf00      	nop
 8003a9e:	e004      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
      return;
 8003aa0:	bf00      	nop
 8003aa2:	e002      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
      return;
 8003aa4:	bf00      	nop
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_IRQHandler+0x642>
    return;
 8003aa8:	bf00      	nop
  }
}
 8003aaa:	37e8      	adds	r7, #232	; 0xe8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b08c      	sub	sp, #48	; 0x30
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4baa      	ldr	r3, [pc, #680]	; (8003db4 <UART_SetConfig+0x2d8>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a9f      	ldr	r2, [pc, #636]	; (8003db8 <UART_SetConfig+0x2dc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b44:	4313      	orrs	r3, r2
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f023 010f 	bic.w	r1, r3, #15
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <UART_SetConfig+0x2e0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d125      	bne.n	8003bcc <UART_SetConfig+0xf0>
 8003b80:	4b8f      	ldr	r3, [pc, #572]	; (8003dc0 <UART_SetConfig+0x2e4>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d81a      	bhi.n	8003bc4 <UART_SetConfig+0xe8>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0xb8>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb5 	.word	0x08003bb5
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbd 	.word	0x08003bbd
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e116      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003bac:	2302      	movs	r3, #2
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb2:	e112      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bba:	e10e      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc2:	e10a      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bca:	e106      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <UART_SetConfig+0x2e8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d138      	bne.n	8003c48 <UART_SetConfig+0x16c>
 8003bd6:	4b7a      	ldr	r3, [pc, #488]	; (8003dc0 <UART_SetConfig+0x2e4>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d82d      	bhi.n	8003c40 <UART_SetConfig+0x164>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x110>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c41 	.word	0x08003c41
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e0d8      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e0d4      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e0d0      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3e:	e0cc      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c46:	e0c8      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5e      	ldr	r2, [pc, #376]	; (8003dc8 <UART_SetConfig+0x2ec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d125      	bne.n	8003c9e <UART_SetConfig+0x1c2>
 8003c52:	4b5b      	ldr	r3, [pc, #364]	; (8003dc0 <UART_SetConfig+0x2e4>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d016      	beq.n	8003c8e <UART_SetConfig+0x1b2>
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d818      	bhi.n	8003c96 <UART_SetConfig+0x1ba>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d00a      	beq.n	8003c7e <UART_SetConfig+0x1a2>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d814      	bhi.n	8003c96 <UART_SetConfig+0x1ba>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <UART_SetConfig+0x19a>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d008      	beq.n	8003c86 <UART_SetConfig+0x1aa>
 8003c74:	e00f      	b.n	8003c96 <UART_SetConfig+0x1ba>
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7c:	e0ad      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c84:	e0a9      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c86:	2304      	movs	r3, #4
 8003c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8c:	e0a5      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c94:	e0a1      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c96:	2310      	movs	r3, #16
 8003c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9c:	e09d      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <UART_SetConfig+0x2f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d125      	bne.n	8003cf4 <UART_SetConfig+0x218>
 8003ca8:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <UART_SetConfig+0x2e4>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb4:	d016      	beq.n	8003ce4 <UART_SetConfig+0x208>
 8003cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb8:	d818      	bhi.n	8003cec <UART_SetConfig+0x210>
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d00a      	beq.n	8003cd4 <UART_SetConfig+0x1f8>
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d814      	bhi.n	8003cec <UART_SetConfig+0x210>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <UART_SetConfig+0x1f0>
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d008      	beq.n	8003cdc <UART_SetConfig+0x200>
 8003cca:	e00f      	b.n	8003cec <UART_SetConfig+0x210>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	e082      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cda:	e07e      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce2:	e07a      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cea:	e076      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf2:	e072      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a35      	ldr	r2, [pc, #212]	; (8003dd0 <UART_SetConfig+0x2f4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12a      	bne.n	8003d54 <UART_SetConfig+0x278>
 8003cfe:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <UART_SetConfig+0x2e4>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0c:	d01a      	beq.n	8003d44 <UART_SetConfig+0x268>
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d81b      	bhi.n	8003d4c <UART_SetConfig+0x270>
 8003d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d18:	d00c      	beq.n	8003d34 <UART_SetConfig+0x258>
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	d815      	bhi.n	8003d4c <UART_SetConfig+0x270>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x250>
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d28:	d008      	beq.n	8003d3c <UART_SetConfig+0x260>
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x270>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d32:	e052      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3a:	e04e      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d42:	e04a      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d44:	2308      	movs	r3, #8
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4a:	e046      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d52:	e042      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <UART_SetConfig+0x2dc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d13a      	bne.n	8003dd4 <UART_SetConfig+0x2f8>
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <UART_SetConfig+0x2e4>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d6c:	d01a      	beq.n	8003da4 <UART_SetConfig+0x2c8>
 8003d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d72:	d81b      	bhi.n	8003dac <UART_SetConfig+0x2d0>
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	d00c      	beq.n	8003d94 <UART_SetConfig+0x2b8>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d815      	bhi.n	8003dac <UART_SetConfig+0x2d0>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x2b0>
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x2c0>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x2d0>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e022      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	e01e      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e01a      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003daa:	e016      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db2:	e012      	b.n	8003dda <UART_SetConfig+0x2fe>
 8003db4:	cfff69f3 	.word	0xcfff69f3
 8003db8:	40008000 	.word	0x40008000
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	40004800 	.word	0x40004800
 8003dcc:	40004c00 	.word	0x40004c00
 8003dd0:	40005000 	.word	0x40005000
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4ab0      	ldr	r2, [pc, #704]	; (80040a0 <UART_SetConfig+0x5c4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	f040 809b 	bne.w	8003f1c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d827      	bhi.n	8003e3e <UART_SetConfig+0x362>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x318>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7fe fc32 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1e:	e014      	b.n	8003e4a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe fc42 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8003e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e26:	e010      	b.n	8003e4a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b9e      	ldr	r3, [pc, #632]	; (80040a4 <UART_SetConfig+0x5c8>)
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e2c:	e00d      	b.n	8003e4a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7fe fb75 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e34:	e009      	b.n	8003e4a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e3c:	e005      	b.n	8003e4a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8130 	beq.w	80040b2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	4a94      	ldr	r2, [pc, #592]	; (80040a8 <UART_SetConfig+0x5cc>)
 8003e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d305      	bcc.n	8003e82 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d903      	bls.n	8003e8a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e88:	e113      	b.n	80040b2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	60fa      	str	r2, [r7, #12]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	4a84      	ldr	r2, [pc, #528]	; (80040a8 <UART_SetConfig+0x5cc>)
 8003e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eac:	f7fc f9ca 	bl	8000244 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	020b      	lsls	r3, r1, #8
 8003ec2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ec6:	0202      	lsls	r2, r0, #8
 8003ec8:	6979      	ldr	r1, [r7, #20]
 8003eca:	6849      	ldr	r1, [r1, #4]
 8003ecc:	0849      	lsrs	r1, r1, #1
 8003ece:	2000      	movs	r0, #0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	eb12 0804 	adds.w	r8, r2, r4
 8003ed8:	eb43 0905 	adc.w	r9, r3, r5
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	469a      	mov	sl, r3
 8003ee4:	4693      	mov	fp, r2
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	465b      	mov	r3, fp
 8003eea:	4640      	mov	r0, r8
 8003eec:	4649      	mov	r1, r9
 8003eee:	f7fc f9a9 	bl	8000244 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f00:	d308      	bcc.n	8003f14 <UART_SetConfig+0x438>
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f08:	d204      	bcs.n	8003f14 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	e0ce      	b.n	80040b2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f1a:	e0ca      	b.n	80040b2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	d166      	bne.n	8003ff4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8003f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d827      	bhi.n	8003f7e <UART_SetConfig+0x4a2>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0x458>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe fb92 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe fba2 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <UART_SetConfig+0x5c8>)
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe fad5 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8003f72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8090 	beq.w	80040b2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	4a44      	ldr	r2, [pc, #272]	; (80040a8 <UART_SetConfig+0x5cc>)
 8003f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	441a      	add	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d916      	bls.n	8003fec <UART_SetConfig+0x510>
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d212      	bcs.n	8003fec <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f023 030f 	bic.w	r3, r3, #15
 8003fce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	8bfb      	ldrh	r3, [r7, #30]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	8bfa      	ldrh	r2, [r7, #30]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e062      	b.n	80040b2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ff2:	e05e      	b.n	80040b2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d828      	bhi.n	800404e <UART_SetConfig+0x572>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x528>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004031 	.word	0x08004031
 800400c:	08004039 	.word	0x08004039
 8004010:	0800404f 	.word	0x0800404f
 8004014:	0800403f 	.word	0x0800403f
 8004018:	0800404f 	.word	0x0800404f
 800401c:	0800404f 	.word	0x0800404f
 8004020:	0800404f 	.word	0x0800404f
 8004024:	08004047 	.word	0x08004047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fb2a 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800402e:	e014      	b.n	800405a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7fe fb3a 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004036:	e010      	b.n	800405a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <UART_SetConfig+0x5c8>)
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800403c:	e00d      	b.n	800405a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403e:	f7fe fa6d 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004044:	e009      	b.n	800405a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800404c:	e005      	b.n	800405a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004058:	bf00      	nop
    }

    if (pclk != 0U)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d028      	beq.n	80040b2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <UART_SetConfig+0x5cc>)
 8004066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800406a:	461a      	mov	r2, r3
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	441a      	add	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d910      	bls.n	80040ac <UART_SetConfig+0x5d0>
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d20c      	bcs.n	80040ac <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	b29a      	uxth	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e009      	b.n	80040b2 <UART_SetConfig+0x5d6>
 800409e:	bf00      	nop
 80040a0:	40008000 	.word	0x40008000
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	08005f74 	.word	0x08005f74
      }
      else
      {
        ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2201      	movs	r2, #1
 80040be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3730      	adds	r7, #48	; 0x30
 80040d6:	46bd      	mov	sp, r7
 80040d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041da:	d10a      	bne.n	80041f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b098      	sub	sp, #96	; 0x60
 8004224:	af02      	add	r7, sp, #8
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004230:	f7fc fde0 	bl	8000df4 <HAL_GetTick>
 8004234:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d12f      	bne.n	80042a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	2200      	movs	r2, #0
 800424e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f88e 	bl	8004374 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d022      	beq.n	80042a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427c:	647b      	str	r3, [r7, #68]	; 0x44
 800427e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e063      	b.n	800436c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d149      	bne.n	8004346 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	2200      	movs	r2, #0
 80042bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f857 	bl	8004374 <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d03c      	beq.n	8004346 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	623b      	str	r3, [r7, #32]
   return(result);
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
 80042ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e6      	bne.n	80042cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	60fb      	str	r3, [r7, #12]
   return(result);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431e:	61fa      	str	r2, [r7, #28]
 8004320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	617b      	str	r3, [r7, #20]
   return(result);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e5      	bne.n	80042fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e012      	b.n	800436c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3758      	adds	r7, #88	; 0x58
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004384:	e049      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800438c:	d045      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fc fd31 	bl	8000df4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e048      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d031      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d110      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f838 	bl	8004442 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2208      	movs	r2, #8
 80043d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e029      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f4:	d111      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f81e 	bl	8004442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e00f      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d0a6      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004442:	b480      	push	{r7}
 8004444:	b095      	sub	sp, #84	; 0x54
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	643b      	str	r3, [r7, #64]	; 0x40
 800446a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800446e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	61fb      	str	r3, [r7, #28]
   return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e3      	bne.n	800447c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d118      	bne.n	80044ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f023 0310 	bic.w	r3, r3, #16
 80044d0:	647b      	str	r3, [r7, #68]	; 0x44
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	613b      	str	r3, [r7, #16]
   return(result);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e6      	bne.n	80044bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004502:	bf00      	nop
 8004504:	3754      	adds	r7, #84	; 0x54
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fabf 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b08f      	sub	sp, #60	; 0x3c
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	2b21      	cmp	r3, #33	; 0x21
 800454a:	d14c      	bne.n	80045e6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d132      	bne.n	80045be <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	61fb      	str	r3, [r7, #28]
   return(result);
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004578:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800457c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e6      	bne.n	8004558 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	60bb      	str	r3, [r7, #8]
   return(result);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6979      	ldr	r1, [r7, #20]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	613b      	str	r3, [r7, #16]
   return(result);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80045bc:	e013      	b.n	80045e6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80045e6:	bf00      	nop
 80045e8:	373c      	adds	r7, #60	; 0x3c
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b091      	sub	sp, #68	; 0x44
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	2b21      	cmp	r3, #33	; 0x21
 8004602:	d151      	bne.n	80046a8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d132      	bne.n	8004676 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	623b      	str	r3, [r7, #32]
   return(result);
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004624:	63bb      	str	r3, [r7, #56]	; 0x38
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
 8004630:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e6      	bne.n	8004610 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	69b9      	ldr	r1, [r7, #24]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	617b      	str	r3, [r7, #20]
   return(result);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004674:	e018      	b.n	80046a8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	1c9a      	adds	r2, r3, #2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80046a8:	bf00      	nop
 80046aa:	3744      	adds	r7, #68	; 0x44
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b091      	sub	sp, #68	; 0x44
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	2b21      	cmp	r3, #33	; 0x21
 80046c4:	d160      	bne.n	8004788 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80046cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046ce:	e057      	b.n	8004780 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d133      	bne.n	8004744 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	623b      	str	r3, [r7, #32]
   return(result);
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046fc:	633a      	str	r2, [r7, #48]	; 0x30
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	60fb      	str	r3, [r7, #12]
   return(result);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	69b9      	ldr	r1, [r7, #24]
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	617b      	str	r3, [r7, #20]
   return(result);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e6      	bne.n	8004710 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004742:	e021      	b.n	8004788 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d013      	beq.n	800477a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800477a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800477c:	3b01      	subs	r3, #1
 800477e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004780:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1a4      	bne.n	80046d0 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004786:	e7ff      	b.n	8004788 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004788:	bf00      	nop
 800478a:	3744      	adds	r7, #68	; 0x44
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b091      	sub	sp, #68	; 0x44
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	2b21      	cmp	r3, #33	; 0x21
 80047a4:	d165      	bne.n	8004872 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80047ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047ae:	e05c      	b.n	800486a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d133      	bne.n	8004824 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3308      	adds	r3, #8
 80047da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6979      	ldr	r1, [r7, #20]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	613b      	str	r3, [r7, #16]
   return(result);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e6      	bne.n	80047f0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004822:	e026      	b.n	8004872 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d018      	beq.n	8004864 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004864:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004866:	3b01      	subs	r3, #1
 8004868:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800486a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800486c:	2b00      	cmp	r3, #0
 800486e:	d19f      	bne.n	80047b0 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004870:	e7ff      	b.n	8004872 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004872:	bf00      	nop
 8004874:	3744      	adds	r7, #68	; 0x44
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60bb      	str	r3, [r7, #8]
   return(result);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fb fe4c 	bl	8000564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048cc:	bf00      	nop
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_UARTEx_DisableFifoMode+0x16>
 8004922:	2302      	movs	r3, #2
 8004924:	e027      	b.n	8004976 <HAL_UARTEx_DisableFifoMode+0x66>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2224      	movs	r2, #36	; 0x24
 8004932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004954:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004996:	2302      	movs	r3, #2
 8004998:	e02d      	b.n	80049f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2224      	movs	r2, #36	; 0x24
 80049a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f850 	bl	8004a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e02d      	b.n	8004a72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2224      	movs	r2, #36	; 0x24
 8004a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f812 	bl	8004a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d108      	bne.n	8004a9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a9c:	e031      	b.n	8004b02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	0e5b      	lsrs	r3, r3, #25
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	0f5b      	lsrs	r3, r3, #29
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ac6:	7bbb      	ldrb	r3, [r7, #14]
 8004ac8:	7b3a      	ldrb	r2, [r7, #12]
 8004aca:	4911      	ldr	r1, [pc, #68]	; (8004b10 <UARTEx_SetNbDataToProcess+0x94>)
 8004acc:	5c8a      	ldrb	r2, [r1, r2]
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ad2:	7b3a      	ldrb	r2, [r7, #12]
 8004ad4:	490f      	ldr	r1, [pc, #60]	; (8004b14 <UARTEx_SetNbDataToProcess+0x98>)
 8004ad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ad8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	7b7a      	ldrb	r2, [r7, #13]
 8004ae8:	4909      	ldr	r1, [pc, #36]	; (8004b10 <UARTEx_SetNbDataToProcess+0x94>)
 8004aea:	5c8a      	ldrb	r2, [r1, r2]
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004af0:	7b7a      	ldrb	r2, [r7, #13]
 8004af2:	4908      	ldr	r1, [pc, #32]	; (8004b14 <UARTEx_SetNbDataToProcess+0x98>)
 8004af4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	08005f8c 	.word	0x08005f8c
 8004b14:	08005f94 	.word	0x08005f94

08004b18 <findslot>:
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <findslot+0x2c>)
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	b118      	cbz	r0, 8004b2a <findslot+0x12>
 8004b22:	6a03      	ldr	r3, [r0, #32]
 8004b24:	b90b      	cbnz	r3, 8004b2a <findslot+0x12>
 8004b26:	f000 fb25 	bl	8005174 <__sinit>
 8004b2a:	2c13      	cmp	r4, #19
 8004b2c:	d807      	bhi.n	8004b3e <findslot+0x26>
 8004b2e:	4806      	ldr	r0, [pc, #24]	; (8004b48 <findslot+0x30>)
 8004b30:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004b34:	3201      	adds	r2, #1
 8004b36:	d002      	beq.n	8004b3e <findslot+0x26>
 8004b38:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e7fc      	b.n	8004b3c <findslot+0x24>
 8004b42:	bf00      	nop
 8004b44:	20000070 	.word	0x20000070
 8004b48:	2000018c 	.word	0x2000018c

08004b4c <error>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	4604      	mov	r4, r0
 8004b50:	2613      	movs	r6, #19
 8004b52:	f000 fbe9 	bl	8005328 <__errno>
 8004b56:	2700      	movs	r7, #0
 8004b58:	4605      	mov	r5, r0
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	beab      	bkpt	0x00ab
 8004b60:	4606      	mov	r6, r0
 8004b62:	4620      	mov	r0, r4
 8004b64:	602e      	str	r6, [r5, #0]
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b68 <checkerror>:
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d101      	bne.n	8004b70 <checkerror+0x8>
 8004b6c:	f7ff bfee 	b.w	8004b4c <error>
 8004b70:	4770      	bx	lr

08004b72 <_swiread>:
 8004b72:	b530      	push	{r4, r5, lr}
 8004b74:	b085      	sub	sp, #20
 8004b76:	2406      	movs	r4, #6
 8004b78:	ad01      	add	r5, sp, #4
 8004b7a:	9203      	str	r2, [sp, #12]
 8004b7c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004b80:	4620      	mov	r0, r4
 8004b82:	4629      	mov	r1, r5
 8004b84:	beab      	bkpt	0x00ab
 8004b86:	4604      	mov	r4, r0
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff ffed 	bl	8004b68 <checkerror>
 8004b8e:	b005      	add	sp, #20
 8004b90:	bd30      	pop	{r4, r5, pc}

08004b92 <_read>:
 8004b92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b94:	4615      	mov	r5, r2
 8004b96:	9101      	str	r1, [sp, #4]
 8004b98:	f7ff ffbe 	bl	8004b18 <findslot>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	9901      	ldr	r1, [sp, #4]
 8004ba0:	b938      	cbnz	r0, 8004bb2 <_read+0x20>
 8004ba2:	f000 fbc1 	bl	8005328 <__errno>
 8004ba6:	2309      	movs	r3, #9
 8004ba8:	6003      	str	r3, [r0, #0]
 8004baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bae:	b003      	add	sp, #12
 8004bb0:	bd30      	pop	{r4, r5, pc}
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	6800      	ldr	r0, [r0, #0]
 8004bb6:	f7ff ffdc 	bl	8004b72 <_swiread>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	d0f7      	beq.n	8004bae <_read+0x1c>
 8004bbe:	1a2a      	subs	r2, r5, r0
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	e7f1      	b.n	8004bae <_read+0x1c>

08004bca <_swilseek>:
 8004bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bcc:	460c      	mov	r4, r1
 8004bce:	4616      	mov	r6, r2
 8004bd0:	f7ff ffa2 	bl	8004b18 <findslot>
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	b940      	cbnz	r0, 8004bea <_swilseek+0x20>
 8004bd8:	f000 fba6 	bl	8005328 <__errno>
 8004bdc:	2309      	movs	r3, #9
 8004bde:	6003      	str	r3, [r0, #0]
 8004be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004be4:	4620      	mov	r0, r4
 8004be6:	b003      	add	sp, #12
 8004be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bea:	2e02      	cmp	r6, #2
 8004bec:	d903      	bls.n	8004bf6 <_swilseek+0x2c>
 8004bee:	f000 fb9b 	bl	8005328 <__errno>
 8004bf2:	2316      	movs	r3, #22
 8004bf4:	e7f3      	b.n	8004bde <_swilseek+0x14>
 8004bf6:	2e01      	cmp	r6, #1
 8004bf8:	d112      	bne.n	8004c20 <_swilseek+0x56>
 8004bfa:	6843      	ldr	r3, [r0, #4]
 8004bfc:	18e4      	adds	r4, r4, r3
 8004bfe:	d4f6      	bmi.n	8004bee <_swilseek+0x24>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	260a      	movs	r6, #10
 8004c04:	466f      	mov	r7, sp
 8004c06:	e9cd 3400 	strd	r3, r4, [sp]
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	beab      	bkpt	0x00ab
 8004c10:	4606      	mov	r6, r0
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7ff ffa8 	bl	8004b68 <checkerror>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	dbe1      	blt.n	8004be0 <_swilseek+0x16>
 8004c1c:	606c      	str	r4, [r5, #4]
 8004c1e:	e7e1      	b.n	8004be4 <_swilseek+0x1a>
 8004c20:	2e02      	cmp	r6, #2
 8004c22:	6803      	ldr	r3, [r0, #0]
 8004c24:	d1ec      	bne.n	8004c00 <_swilseek+0x36>
 8004c26:	260c      	movs	r6, #12
 8004c28:	466f      	mov	r7, sp
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	4639      	mov	r1, r7
 8004c30:	beab      	bkpt	0x00ab
 8004c32:	4606      	mov	r6, r0
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7ff ff97 	bl	8004b68 <checkerror>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	d0d0      	beq.n	8004be0 <_swilseek+0x16>
 8004c3e:	4404      	add	r4, r0
 8004c40:	e7de      	b.n	8004c00 <_swilseek+0x36>

08004c42 <_lseek>:
 8004c42:	f7ff bfc2 	b.w	8004bca <_swilseek>

08004c46 <_swiwrite>:
 8004c46:	b530      	push	{r4, r5, lr}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	2405      	movs	r4, #5
 8004c4c:	ad01      	add	r5, sp, #4
 8004c4e:	9203      	str	r2, [sp, #12]
 8004c50:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	beab      	bkpt	0x00ab
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7ff ff83 	bl	8004b68 <checkerror>
 8004c62:	b005      	add	sp, #20
 8004c64:	bd30      	pop	{r4, r5, pc}

08004c66 <_write>:
 8004c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c68:	4615      	mov	r5, r2
 8004c6a:	9101      	str	r1, [sp, #4]
 8004c6c:	f7ff ff54 	bl	8004b18 <findslot>
 8004c70:	4604      	mov	r4, r0
 8004c72:	9901      	ldr	r1, [sp, #4]
 8004c74:	b930      	cbnz	r0, 8004c84 <_write+0x1e>
 8004c76:	f000 fb57 	bl	8005328 <__errno>
 8004c7a:	2309      	movs	r3, #9
 8004c7c:	6003      	str	r3, [r0, #0]
 8004c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c82:	e012      	b.n	8004caa <_write+0x44>
 8004c84:	462a      	mov	r2, r5
 8004c86:	6800      	ldr	r0, [r0, #0]
 8004c88:	f7ff ffdd 	bl	8004c46 <_swiwrite>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	dbf6      	blt.n	8004c7e <_write+0x18>
 8004c90:	6862      	ldr	r2, [r4, #4]
 8004c92:	1a2b      	subs	r3, r5, r0
 8004c94:	42a8      	cmp	r0, r5
 8004c96:	441a      	add	r2, r3
 8004c98:	6062      	str	r2, [r4, #4]
 8004c9a:	d105      	bne.n	8004ca8 <_write+0x42>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	b003      	add	sp, #12
 8004ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ca4:	f7ff bf52 	b.w	8004b4c <error>
 8004ca8:	4618      	mov	r0, r3
 8004caa:	b003      	add	sp, #12
 8004cac:	bd30      	pop	{r4, r5, pc}

08004cae <_swiclose>:
 8004cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cb0:	2402      	movs	r4, #2
 8004cb2:	ad01      	add	r5, sp, #4
 8004cb4:	9001      	str	r0, [sp, #4]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	beab      	bkpt	0x00ab
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7ff ff52 	bl	8004b68 <checkerror>
 8004cc4:	b003      	add	sp, #12
 8004cc6:	bd30      	pop	{r4, r5, pc}

08004cc8 <_close>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4605      	mov	r5, r0
 8004ccc:	f7ff ff24 	bl	8004b18 <findslot>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	b930      	cbnz	r0, 8004ce2 <_close+0x1a>
 8004cd4:	f000 fb28 	bl	8005328 <__errno>
 8004cd8:	2309      	movs	r3, #9
 8004cda:	6003      	str	r3, [r0, #0]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce0:	bd38      	pop	{r3, r4, r5, pc}
 8004ce2:	3d01      	subs	r5, #1
 8004ce4:	2d01      	cmp	r5, #1
 8004ce6:	d809      	bhi.n	8004cfc <_close+0x34>
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <_close+0x48>)
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d104      	bne.n	8004cfc <_close+0x34>
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf6:	6003      	str	r3, [r0, #0]
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	e7f1      	b.n	8004ce0 <_close+0x18>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	f7ff ffd6 	bl	8004cae <_swiclose>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d1ec      	bne.n	8004ce0 <_close+0x18>
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	e7e8      	b.n	8004ce0 <_close+0x18>
 8004d0e:	bf00      	nop
 8004d10:	2000018c 	.word	0x2000018c

08004d14 <_swistat>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	460c      	mov	r4, r1
 8004d18:	f7ff fefe 	bl	8004b18 <findslot>
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b930      	cbnz	r0, 8004d2e <_swistat+0x1a>
 8004d20:	f000 fb02 	bl	8005328 <__errno>
 8004d24:	2309      	movs	r3, #9
 8004d26:	6003      	str	r3, [r0, #0]
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	260c      	movs	r6, #12
 8004d32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d3e:	4630      	mov	r0, r6
 8004d40:	4629      	mov	r1, r5
 8004d42:	beab      	bkpt	0x00ab
 8004d44:	4605      	mov	r5, r0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f7ff ff0e 	bl	8004b68 <checkerror>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	bf1c      	itt	ne
 8004d50:	6120      	strne	r0, [r4, #16]
 8004d52:	2000      	movne	r0, #0
 8004d54:	e7ea      	b.n	8004d2c <_swistat+0x18>

08004d56 <_fstat>:
 8004d56:	460b      	mov	r3, r1
 8004d58:	2258      	movs	r2, #88	; 0x58
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fa92 	bl	800528a <memset>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4620      	mov	r0, r4
 8004d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6e:	f7ff bfd1 	b.w	8004d14 <_swistat>

08004d72 <_stat>:
 8004d72:	b538      	push	{r3, r4, r5, lr}
 8004d74:	460d      	mov	r5, r1
 8004d76:	4604      	mov	r4, r0
 8004d78:	2258      	movs	r2, #88	; 0x58
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 fa84 	bl	800528a <memset>
 8004d82:	4620      	mov	r0, r4
 8004d84:	2100      	movs	r1, #0
 8004d86:	f000 f811 	bl	8004dac <_swiopen>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	d00b      	beq.n	8004da8 <_stat+0x36>
 8004d90:	686b      	ldr	r3, [r5, #4]
 8004d92:	4629      	mov	r1, r5
 8004d94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d98:	606b      	str	r3, [r5, #4]
 8004d9a:	f7ff ffbb 	bl	8004d14 <_swistat>
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4620      	mov	r0, r4
 8004da2:	462c      	mov	r4, r5
 8004da4:	f7ff ff90 	bl	8004cc8 <_close>
 8004da8:	4620      	mov	r0, r4
 8004daa:	bd38      	pop	{r3, r4, r5, pc}

08004dac <_swiopen>:
 8004dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004db0:	4607      	mov	r7, r0
 8004db2:	b097      	sub	sp, #92	; 0x5c
 8004db4:	460e      	mov	r6, r1
 8004db6:	2500      	movs	r5, #0
 8004db8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004e5c <_swiopen+0xb0>
 8004dbc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004dc0:	1c61      	adds	r1, r4, #1
 8004dc2:	d036      	beq.n	8004e32 <_swiopen+0x86>
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	2d14      	cmp	r5, #20
 8004dc8:	d1f8      	bne.n	8004dbc <_swiopen+0x10>
 8004dca:	f000 faad 	bl	8005328 <__errno>
 8004dce:	2318      	movs	r3, #24
 8004dd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dd4:	6003      	str	r3, [r0, #0]
 8004dd6:	e03c      	b.n	8004e52 <_swiopen+0xa6>
 8004dd8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004ddc:	f240 6301 	movw	r3, #1537	; 0x601
 8004de0:	07b2      	lsls	r2, r6, #30
 8004de2:	4638      	mov	r0, r7
 8004de4:	9700      	str	r7, [sp, #0]
 8004de6:	bf48      	it	mi
 8004de8:	f044 0402 	orrmi.w	r4, r4, #2
 8004dec:	421e      	tst	r6, r3
 8004dee:	bf18      	it	ne
 8004df0:	f044 0404 	orrne.w	r4, r4, #4
 8004df4:	0733      	lsls	r3, r6, #28
 8004df6:	bf44      	itt	mi
 8004df8:	f024 0404 	bicmi.w	r4, r4, #4
 8004dfc:	f044 0408 	orrmi.w	r4, r4, #8
 8004e00:	f7fb fa18 	bl	8000234 <strlen>
 8004e04:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004e08:	2401      	movs	r4, #1
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	beab      	bkpt	0x00ab
 8004e10:	4604      	mov	r4, r0
 8004e12:	2c00      	cmp	r4, #0
 8004e14:	db08      	blt.n	8004e28 <_swiopen+0x7c>
 8004e16:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004e20:	462c      	mov	r4, r5
 8004e22:	f8c8 3004 	str.w	r3, [r8, #4]
 8004e26:	e014      	b.n	8004e52 <_swiopen+0xa6>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7ff fe8f 	bl	8004b4c <error>
 8004e2e:	4604      	mov	r4, r0
 8004e30:	e00f      	b.n	8004e52 <_swiopen+0xa6>
 8004e32:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8004e36:	46e9      	mov	r9, sp
 8004e38:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004e3c:	d1cc      	bne.n	8004dd8 <_swiopen+0x2c>
 8004e3e:	4649      	mov	r1, r9
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ff96 	bl	8004d72 <_stat>
 8004e46:	3001      	adds	r0, #1
 8004e48:	d0c6      	beq.n	8004dd8 <_swiopen+0x2c>
 8004e4a:	f000 fa6d 	bl	8005328 <__errno>
 8004e4e:	2311      	movs	r3, #17
 8004e50:	6003      	str	r3, [r0, #0]
 8004e52:	4620      	mov	r0, r4
 8004e54:	b017      	add	sp, #92	; 0x5c
 8004e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2000018c 	.word	0x2000018c

08004e60 <_get_semihosting_exts>:
 8004e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e64:	4606      	mov	r6, r0
 8004e66:	4615      	mov	r5, r2
 8004e68:	460f      	mov	r7, r1
 8004e6a:	482a      	ldr	r0, [pc, #168]	; (8004f14 <_get_semihosting_exts+0xb4>)
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	f7ff ff9d 	bl	8004dac <_swiopen>
 8004e72:	4604      	mov	r4, r0
 8004e74:	462a      	mov	r2, r5
 8004e76:	2100      	movs	r1, #0
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 fa06 	bl	800528a <memset>
 8004e7e:	1c63      	adds	r3, r4, #1
 8004e80:	d016      	beq.n	8004eb0 <_get_semihosting_exts+0x50>
 8004e82:	4620      	mov	r0, r4
 8004e84:	f04f 080c 	mov.w	r8, #12
 8004e88:	f7ff fe46 	bl	8004b18 <findslot>
 8004e8c:	4681      	mov	r9, r0
 8004e8e:	4640      	mov	r0, r8
 8004e90:	4649      	mov	r1, r9
 8004e92:	beab      	bkpt	0x00ab
 8004e94:	4680      	mov	r8, r0
 8004e96:	4640      	mov	r0, r8
 8004e98:	f7ff fe66 	bl	8004b68 <checkerror>
 8004e9c:	2803      	cmp	r0, #3
 8004e9e:	dd02      	ble.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ea0:	1ec3      	subs	r3, r0, #3
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	dc08      	bgt.n	8004eb8 <_get_semihosting_exts+0x58>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004eac:	f7ff ff0c 	bl	8004cc8 <_close>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	b003      	add	sp, #12
 8004eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004eb8:	2204      	movs	r2, #4
 8004eba:	4620      	mov	r0, r4
 8004ebc:	eb0d 0102 	add.w	r1, sp, r2
 8004ec0:	f7ff fe67 	bl	8004b92 <_read>
 8004ec4:	2803      	cmp	r0, #3
 8004ec6:	ddee      	ble.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ec8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ecc:	2b53      	cmp	r3, #83	; 0x53
 8004ece:	d1ea      	bne.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ed0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004ed4:	2b48      	cmp	r3, #72	; 0x48
 8004ed6:	d1e6      	bne.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ed8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004edc:	2b46      	cmp	r3, #70	; 0x46
 8004ede:	d1e2      	bne.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ee4:	2b42      	cmp	r3, #66	; 0x42
 8004ee6:	d1de      	bne.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4639      	mov	r1, r7
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff fe6c 	bl	8004bca <_swilseek>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	dbd7      	blt.n	8004ea6 <_get_semihosting_exts+0x46>
 8004ef6:	462a      	mov	r2, r5
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7ff fe49 	bl	8004b92 <_read>
 8004f00:	4605      	mov	r5, r0
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7ff fee0 	bl	8004cc8 <_close>
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7ff fe2d 	bl	8004b68 <checkerror>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	e7ce      	b.n	8004eb0 <_get_semihosting_exts+0x50>
 8004f12:	bf00      	nop
 8004f14:	08005f9c 	.word	0x08005f9c

08004f18 <initialise_semihosting_exts>:
 8004f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4d09      	ldr	r5, [pc, #36]	; (8004f44 <initialise_semihosting_exts+0x2c>)
 8004f20:	a801      	add	r0, sp, #4
 8004f22:	4c09      	ldr	r4, [pc, #36]	; (8004f48 <initialise_semihosting_exts+0x30>)
 8004f24:	6029      	str	r1, [r5, #0]
 8004f26:	6022      	str	r2, [r4, #0]
 8004f28:	f7ff ff9a 	bl	8004e60 <_get_semihosting_exts>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	dd07      	ble.n	8004f40 <initialise_semihosting_exts+0x28>
 8004f30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f34:	f003 0201 	and.w	r2, r3, #1
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	602a      	str	r2, [r5, #0]
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	b003      	add	sp, #12
 8004f42:	bd30      	pop	{r4, r5, pc}
 8004f44:	20000010 	.word	0x20000010
 8004f48:	20000014 	.word	0x20000014

08004f4c <_has_ext_stdout_stderr>:
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	4c04      	ldr	r4, [pc, #16]	; (8004f60 <_has_ext_stdout_stderr+0x14>)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	da01      	bge.n	8004f5a <_has_ext_stdout_stderr+0xe>
 8004f56:	f7ff ffdf 	bl	8004f18 <initialise_semihosting_exts>
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000014 	.word	0x20000014

08004f64 <initialise_monitor_handles>:
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	2303      	movs	r3, #3
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800501c <initialise_monitor_handles+0xb8>
 8004f70:	2400      	movs	r4, #0
 8004f72:	af01      	add	r7, sp, #4
 8004f74:	2501      	movs	r5, #1
 8004f76:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	9402      	str	r4, [sp, #8]
 8004f7e:	4628      	mov	r0, r5
 8004f80:	4639      	mov	r1, r7
 8004f82:	beab      	bkpt	0x00ab
 8004f84:	4605      	mov	r5, r0
 8004f86:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005020 <initialise_monitor_handles+0xbc>
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f90:	4c1f      	ldr	r4, [pc, #124]	; (8005010 <initialise_monitor_handles+0xac>)
 8004f92:	f8c8 5000 	str.w	r5, [r8]
 8004f96:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	2b14      	cmp	r3, #20
 8004f9e:	d1fa      	bne.n	8004f96 <initialise_monitor_handles+0x32>
 8004fa0:	4d1c      	ldr	r5, [pc, #112]	; (8005014 <initialise_monitor_handles+0xb0>)
 8004fa2:	f7ff ffd3 	bl	8004f4c <_has_ext_stdout_stderr>
 8004fa6:	b1d0      	cbz	r0, 8004fde <initialise_monitor_handles+0x7a>
 8004fa8:	f04f 0a03 	mov.w	sl, #3
 8004fac:	2304      	movs	r3, #4
 8004fae:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fb2:	2601      	movs	r6, #1
 8004fb4:	f8cd a00c 	str.w	sl, [sp, #12]
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	beab      	bkpt	0x00ab
 8004fc0:	4683      	mov	fp, r0
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <initialise_monitor_handles+0xb4>)
 8004fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fc8:	f8c3 b000 	str.w	fp, [r3]
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f8cd a00c 	str.w	sl, [sp, #12]
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	beab      	bkpt	0x00ab
 8004fda:	4606      	mov	r6, r0
 8004fdc:	602e      	str	r6, [r5, #0]
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	6066      	str	r6, [r4, #4]
 8004fe6:	bf02      	ittt	eq
 8004fe8:	4b0b      	ldreq	r3, [pc, #44]	; (8005018 <initialise_monitor_handles+0xb4>)
 8004fea:	681b      	ldreq	r3, [r3, #0]
 8004fec:	602b      	streq	r3, [r5, #0]
 8004fee:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	f7ff ffaa 	bl	8004f4c <_has_ext_stdout_stderr>
 8004ff8:	b130      	cbz	r0, 8005008 <initialise_monitor_handles+0xa4>
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <initialise_monitor_handles+0xb4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005008:	b005      	add	sp, #20
 800500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	2000018c 	.word	0x2000018c
 8005014:	20000180 	.word	0x20000180
 8005018:	20000188 	.word	0x20000188
 800501c:	08005fb2 	.word	0x08005fb2
 8005020:	20000184 	.word	0x20000184

08005024 <_isatty>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	f7ff fd77 	bl	8004b18 <findslot>
 800502a:	2509      	movs	r5, #9
 800502c:	4604      	mov	r4, r0
 800502e:	b920      	cbnz	r0, 800503a <_isatty+0x16>
 8005030:	f000 f97a 	bl	8005328 <__errno>
 8005034:	6005      	str	r5, [r0, #0]
 8005036:	4620      	mov	r0, r4
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	4628      	mov	r0, r5
 800503c:	4621      	mov	r1, r4
 800503e:	beab      	bkpt	0x00ab
 8005040:	4604      	mov	r4, r0
 8005042:	2c01      	cmp	r4, #1
 8005044:	d0f7      	beq.n	8005036 <_isatty+0x12>
 8005046:	f000 f96f 	bl	8005328 <__errno>
 800504a:	2400      	movs	r4, #0
 800504c:	4605      	mov	r5, r0
 800504e:	2613      	movs	r6, #19
 8005050:	4630      	mov	r0, r6
 8005052:	4621      	mov	r1, r4
 8005054:	beab      	bkpt	0x00ab
 8005056:	4606      	mov	r6, r0
 8005058:	602e      	str	r6, [r5, #0]
 800505a:	e7ec      	b.n	8005036 <_isatty+0x12>

0800505c <std>:
 800505c:	2300      	movs	r3, #0
 800505e:	b510      	push	{r4, lr}
 8005060:	4604      	mov	r4, r0
 8005062:	6083      	str	r3, [r0, #8]
 8005064:	8181      	strh	r1, [r0, #12]
 8005066:	4619      	mov	r1, r3
 8005068:	6643      	str	r3, [r0, #100]	; 0x64
 800506a:	81c2      	strh	r2, [r0, #14]
 800506c:	2208      	movs	r2, #8
 800506e:	6183      	str	r3, [r0, #24]
 8005070:	e9c0 3300 	strd	r3, r3, [r0]
 8005074:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005078:	305c      	adds	r0, #92	; 0x5c
 800507a:	f000 f906 	bl	800528a <memset>
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <std+0x58>)
 8005080:	6224      	str	r4, [r4, #32]
 8005082:	6263      	str	r3, [r4, #36]	; 0x24
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <std+0x5c>)
 8005086:	62a3      	str	r3, [r4, #40]	; 0x28
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <std+0x60>)
 800508a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <std+0x64>)
 800508e:	6323      	str	r3, [r4, #48]	; 0x30
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <std+0x68>)
 8005092:	429c      	cmp	r4, r3
 8005094:	d006      	beq.n	80050a4 <std+0x48>
 8005096:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800509a:	4294      	cmp	r4, r2
 800509c:	d002      	beq.n	80050a4 <std+0x48>
 800509e:	33d0      	adds	r3, #208	; 0xd0
 80050a0:	429c      	cmp	r4, r3
 80050a2:	d105      	bne.n	80050b0 <std+0x54>
 80050a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ac:	f000 b966 	b.w	800537c <__retarget_lock_init_recursive>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	bf00      	nop
 80050b4:	08005205 	.word	0x08005205
 80050b8:	08005227 	.word	0x08005227
 80050bc:	0800525f 	.word	0x0800525f
 80050c0:	08005283 	.word	0x08005283
 80050c4:	2000022c 	.word	0x2000022c

080050c8 <stdio_exit_handler>:
 80050c8:	4a02      	ldr	r2, [pc, #8]	; (80050d4 <stdio_exit_handler+0xc>)
 80050ca:	4903      	ldr	r1, [pc, #12]	; (80050d8 <stdio_exit_handler+0x10>)
 80050cc:	4803      	ldr	r0, [pc, #12]	; (80050dc <stdio_exit_handler+0x14>)
 80050ce:	f000 b869 	b.w	80051a4 <_fwalk_sglue>
 80050d2:	bf00      	nop
 80050d4:	20000018 	.word	0x20000018
 80050d8:	08005c29 	.word	0x08005c29
 80050dc:	20000024 	.word	0x20000024

080050e0 <cleanup_stdio>:
 80050e0:	6841      	ldr	r1, [r0, #4]
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <cleanup_stdio+0x34>)
 80050e4:	4299      	cmp	r1, r3
 80050e6:	b510      	push	{r4, lr}
 80050e8:	4604      	mov	r4, r0
 80050ea:	d001      	beq.n	80050f0 <cleanup_stdio+0x10>
 80050ec:	f000 fd9c 	bl	8005c28 <_fflush_r>
 80050f0:	68a1      	ldr	r1, [r4, #8]
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <cleanup_stdio+0x38>)
 80050f4:	4299      	cmp	r1, r3
 80050f6:	d002      	beq.n	80050fe <cleanup_stdio+0x1e>
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 fd95 	bl	8005c28 <_fflush_r>
 80050fe:	68e1      	ldr	r1, [r4, #12]
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <cleanup_stdio+0x3c>)
 8005102:	4299      	cmp	r1, r3
 8005104:	d004      	beq.n	8005110 <cleanup_stdio+0x30>
 8005106:	4620      	mov	r0, r4
 8005108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510c:	f000 bd8c 	b.w	8005c28 <_fflush_r>
 8005110:	bd10      	pop	{r4, pc}
 8005112:	bf00      	nop
 8005114:	2000022c 	.word	0x2000022c
 8005118:	20000294 	.word	0x20000294
 800511c:	200002fc 	.word	0x200002fc

08005120 <global_stdio_init.part.0>:
 8005120:	b510      	push	{r4, lr}
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <global_stdio_init.part.0+0x30>)
 8005124:	2104      	movs	r1, #4
 8005126:	4c0b      	ldr	r4, [pc, #44]	; (8005154 <global_stdio_init.part.0+0x34>)
 8005128:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <global_stdio_init.part.0+0x38>)
 800512a:	4620      	mov	r0, r4
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	f7ff ff94 	bl	800505c <std>
 8005134:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005138:	2201      	movs	r2, #1
 800513a:	2109      	movs	r1, #9
 800513c:	f7ff ff8e 	bl	800505c <std>
 8005140:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005144:	2202      	movs	r2, #2
 8005146:	2112      	movs	r1, #18
 8005148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514c:	f7ff bf86 	b.w	800505c <std>
 8005150:	20000364 	.word	0x20000364
 8005154:	2000022c 	.word	0x2000022c
 8005158:	080050c9 	.word	0x080050c9

0800515c <__sfp_lock_acquire>:
 800515c:	4801      	ldr	r0, [pc, #4]	; (8005164 <__sfp_lock_acquire+0x8>)
 800515e:	f000 b90e 	b.w	800537e <__retarget_lock_acquire_recursive>
 8005162:	bf00      	nop
 8005164:	2000036d 	.word	0x2000036d

08005168 <__sfp_lock_release>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__sfp_lock_release+0x8>)
 800516a:	f000 b909 	b.w	8005380 <__retarget_lock_release_recursive>
 800516e:	bf00      	nop
 8005170:	2000036d 	.word	0x2000036d

08005174 <__sinit>:
 8005174:	b510      	push	{r4, lr}
 8005176:	4604      	mov	r4, r0
 8005178:	f7ff fff0 	bl	800515c <__sfp_lock_acquire>
 800517c:	6a23      	ldr	r3, [r4, #32]
 800517e:	b11b      	cbz	r3, 8005188 <__sinit+0x14>
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	f7ff bff0 	b.w	8005168 <__sfp_lock_release>
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <__sinit+0x28>)
 800518a:	6223      	str	r3, [r4, #32]
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <__sinit+0x2c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f5      	bne.n	8005180 <__sinit+0xc>
 8005194:	f7ff ffc4 	bl	8005120 <global_stdio_init.part.0>
 8005198:	e7f2      	b.n	8005180 <__sinit+0xc>
 800519a:	bf00      	nop
 800519c:	080050e1 	.word	0x080050e1
 80051a0:	20000364 	.word	0x20000364

080051a4 <_fwalk_sglue>:
 80051a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a8:	4607      	mov	r7, r0
 80051aa:	4688      	mov	r8, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	2600      	movs	r6, #0
 80051b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b4:	f1b9 0901 	subs.w	r9, r9, #1
 80051b8:	d505      	bpl.n	80051c6 <_fwalk_sglue+0x22>
 80051ba:	6824      	ldr	r4, [r4, #0]
 80051bc:	2c00      	cmp	r4, #0
 80051be:	d1f7      	bne.n	80051b0 <_fwalk_sglue+0xc>
 80051c0:	4630      	mov	r0, r6
 80051c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c6:	89ab      	ldrh	r3, [r5, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d907      	bls.n	80051dc <_fwalk_sglue+0x38>
 80051cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051d0:	3301      	adds	r3, #1
 80051d2:	d003      	beq.n	80051dc <_fwalk_sglue+0x38>
 80051d4:	4629      	mov	r1, r5
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	4306      	orrs	r6, r0
 80051dc:	3568      	adds	r5, #104	; 0x68
 80051de:	e7e9      	b.n	80051b4 <_fwalk_sglue+0x10>

080051e0 <iprintf>:
 80051e0:	b40f      	push	{r0, r1, r2, r3}
 80051e2:	b507      	push	{r0, r1, r2, lr}
 80051e4:	4906      	ldr	r1, [pc, #24]	; (8005200 <iprintf+0x20>)
 80051e6:	ab04      	add	r3, sp, #16
 80051e8:	6808      	ldr	r0, [r1, #0]
 80051ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ee:	6881      	ldr	r1, [r0, #8]
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	f000 f9e9 	bl	80055c8 <_vfiprintf_r>
 80051f6:	b003      	add	sp, #12
 80051f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051fc:	b004      	add	sp, #16
 80051fe:	4770      	bx	lr
 8005200:	20000070 	.word	0x20000070

08005204 <__sread>:
 8005204:	b510      	push	{r4, lr}
 8005206:	460c      	mov	r4, r1
 8005208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520c:	f000 f868 	bl	80052e0 <_read_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	bfab      	itete	ge
 8005214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005216:	89a3      	ldrhlt	r3, [r4, #12]
 8005218:	181b      	addge	r3, r3, r0
 800521a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800521e:	bfac      	ite	ge
 8005220:	6563      	strge	r3, [r4, #84]	; 0x54
 8005222:	81a3      	strhlt	r3, [r4, #12]
 8005224:	bd10      	pop	{r4, pc}

08005226 <__swrite>:
 8005226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522a:	461f      	mov	r7, r3
 800522c:	898b      	ldrh	r3, [r1, #12]
 800522e:	4605      	mov	r5, r0
 8005230:	460c      	mov	r4, r1
 8005232:	05db      	lsls	r3, r3, #23
 8005234:	4616      	mov	r6, r2
 8005236:	d505      	bpl.n	8005244 <__swrite+0x1e>
 8005238:	2302      	movs	r3, #2
 800523a:	2200      	movs	r2, #0
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	f000 f83c 	bl	80052bc <_lseek_r>
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	4632      	mov	r2, r6
 8005248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524c:	4628      	mov	r0, r5
 800524e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	463b      	mov	r3, r7
 8005256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	f000 b853 	b.w	8005304 <_write_r>

0800525e <__sseek>:
 800525e:	b510      	push	{r4, lr}
 8005260:	460c      	mov	r4, r1
 8005262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005266:	f000 f829 	bl	80052bc <_lseek_r>
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	bf15      	itete	ne
 8005270:	6560      	strne	r0, [r4, #84]	; 0x54
 8005272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800527a:	81a3      	strheq	r3, [r4, #12]
 800527c:	bf18      	it	ne
 800527e:	81a3      	strhne	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__sclose>:
 8005282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005286:	f000 b809 	b.w	800529c <_close_r>

0800528a <memset>:
 800528a:	4402      	add	r2, r0
 800528c:	4603      	mov	r3, r0
 800528e:	4293      	cmp	r3, r2
 8005290:	d100      	bne.n	8005294 <memset+0xa>
 8005292:	4770      	bx	lr
 8005294:	f803 1b01 	strb.w	r1, [r3], #1
 8005298:	e7f9      	b.n	800528e <memset+0x4>
	...

0800529c <_close_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	2300      	movs	r3, #0
 80052a0:	4d05      	ldr	r5, [pc, #20]	; (80052b8 <_close_r+0x1c>)
 80052a2:	4604      	mov	r4, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	f7ff fd0e 	bl	8004cc8 <_close>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_close_r+0x1a>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_close_r+0x1a>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20000368 	.word	0x20000368

080052bc <_lseek_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4604      	mov	r4, r0
 80052c0:	4d06      	ldr	r5, [pc, #24]	; (80052dc <_lseek_r+0x20>)
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7ff fcb9 	bl	8004c42 <_lseek>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_lseek_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_lseek_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20000368 	.word	0x20000368

080052e0 <_read_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	4d06      	ldr	r5, [pc, #24]	; (8005300 <_read_r+0x20>)
 80052e6:	4608      	mov	r0, r1
 80052e8:	4611      	mov	r1, r2
 80052ea:	2200      	movs	r2, #0
 80052ec:	602a      	str	r2, [r5, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7ff fc4f 	bl	8004b92 <_read>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_read_r+0x1e>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_read_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20000368 	.word	0x20000368

08005304 <_write_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4604      	mov	r4, r0
 8005308:	4d06      	ldr	r5, [pc, #24]	; (8005324 <_write_r+0x20>)
 800530a:	4608      	mov	r0, r1
 800530c:	4611      	mov	r1, r2
 800530e:	2200      	movs	r2, #0
 8005310:	602a      	str	r2, [r5, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	f7ff fca7 	bl	8004c66 <_write>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d102      	bne.n	8005322 <_write_r+0x1e>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	b103      	cbz	r3, 8005322 <_write_r+0x1e>
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	bd38      	pop	{r3, r4, r5, pc}
 8005324:	20000368 	.word	0x20000368

08005328 <__errno>:
 8005328:	4b01      	ldr	r3, [pc, #4]	; (8005330 <__errno+0x8>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000070 	.word	0x20000070

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4d0d      	ldr	r5, [pc, #52]	; (800536c <__libc_init_array+0x38>)
 8005338:	2600      	movs	r6, #0
 800533a:	4c0d      	ldr	r4, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	42a6      	cmp	r6, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	4d0b      	ldr	r5, [pc, #44]	; (8005374 <__libc_init_array+0x40>)
 8005346:	2600      	movs	r6, #0
 8005348:	4c0b      	ldr	r4, [pc, #44]	; (8005378 <__libc_init_array+0x44>)
 800534a:	f000 fdcd 	bl	8005ee8 <_init>
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	42a6      	cmp	r6, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	f855 3b04 	ldr.w	r3, [r5], #4
 800535c:	3601      	adds	r6, #1
 800535e:	4798      	blx	r3
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	f855 3b04 	ldr.w	r3, [r5], #4
 8005366:	3601      	adds	r6, #1
 8005368:	4798      	blx	r3
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	08005ff4 	.word	0x08005ff4
 8005370:	08005ff4 	.word	0x08005ff4
 8005374:	08005ff4 	.word	0x08005ff4
 8005378:	08005ff8 	.word	0x08005ff8

0800537c <__retarget_lock_init_recursive>:
 800537c:	4770      	bx	lr

0800537e <__retarget_lock_acquire_recursive>:
 800537e:	4770      	bx	lr

08005380 <__retarget_lock_release_recursive>:
 8005380:	4770      	bx	lr
	...

08005384 <_free_r>:
 8005384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005386:	2900      	cmp	r1, #0
 8005388:	d043      	beq.n	8005412 <_free_r+0x8e>
 800538a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538e:	1f0c      	subs	r4, r1, #4
 8005390:	9001      	str	r0, [sp, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	bfb8      	it	lt
 8005396:	18e4      	addlt	r4, r4, r3
 8005398:	f000 f8e0 	bl	800555c <__malloc_lock>
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <_free_r+0x94>)
 800539e:	9801      	ldr	r0, [sp, #4]
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	b933      	cbnz	r3, 80053b2 <_free_r+0x2e>
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	6014      	str	r4, [r2, #0]
 80053a8:	b003      	add	sp, #12
 80053aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ae:	f000 b8db 	b.w	8005568 <__malloc_unlock>
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	d908      	bls.n	80053c8 <_free_r+0x44>
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	1961      	adds	r1, r4, r5
 80053ba:	428b      	cmp	r3, r1
 80053bc:	bf01      	itttt	eq
 80053be:	6819      	ldreq	r1, [r3, #0]
 80053c0:	685b      	ldreq	r3, [r3, #4]
 80053c2:	1949      	addeq	r1, r1, r5
 80053c4:	6021      	streq	r1, [r4, #0]
 80053c6:	e7ed      	b.n	80053a4 <_free_r+0x20>
 80053c8:	461a      	mov	r2, r3
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	b10b      	cbz	r3, 80053d2 <_free_r+0x4e>
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	d9fa      	bls.n	80053c8 <_free_r+0x44>
 80053d2:	6811      	ldr	r1, [r2, #0]
 80053d4:	1855      	adds	r5, r2, r1
 80053d6:	42a5      	cmp	r5, r4
 80053d8:	d10b      	bne.n	80053f2 <_free_r+0x6e>
 80053da:	6824      	ldr	r4, [r4, #0]
 80053dc:	4421      	add	r1, r4
 80053de:	1854      	adds	r4, r2, r1
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	d1e0      	bne.n	80053a8 <_free_r+0x24>
 80053e6:	681c      	ldr	r4, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	440c      	add	r4, r1
 80053ec:	6053      	str	r3, [r2, #4]
 80053ee:	6014      	str	r4, [r2, #0]
 80053f0:	e7da      	b.n	80053a8 <_free_r+0x24>
 80053f2:	d902      	bls.n	80053fa <_free_r+0x76>
 80053f4:	230c      	movs	r3, #12
 80053f6:	6003      	str	r3, [r0, #0]
 80053f8:	e7d6      	b.n	80053a8 <_free_r+0x24>
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	1961      	adds	r1, r4, r5
 80053fe:	428b      	cmp	r3, r1
 8005400:	bf02      	ittt	eq
 8005402:	6819      	ldreq	r1, [r3, #0]
 8005404:	685b      	ldreq	r3, [r3, #4]
 8005406:	1949      	addeq	r1, r1, r5
 8005408:	6063      	str	r3, [r4, #4]
 800540a:	bf08      	it	eq
 800540c:	6021      	streq	r1, [r4, #0]
 800540e:	6054      	str	r4, [r2, #4]
 8005410:	e7ca      	b.n	80053a8 <_free_r+0x24>
 8005412:	b003      	add	sp, #12
 8005414:	bd30      	pop	{r4, r5, pc}
 8005416:	bf00      	nop
 8005418:	20000370 	.word	0x20000370

0800541c <sbrk_aligned>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4e0e      	ldr	r6, [pc, #56]	; (8005458 <sbrk_aligned+0x3c>)
 8005420:	460c      	mov	r4, r1
 8005422:	4605      	mov	r5, r0
 8005424:	6831      	ldr	r1, [r6, #0]
 8005426:	b911      	cbnz	r1, 800542e <sbrk_aligned+0x12>
 8005428:	f000 fcbc 	bl	8005da4 <_sbrk_r>
 800542c:	6030      	str	r0, [r6, #0]
 800542e:	4621      	mov	r1, r4
 8005430:	4628      	mov	r0, r5
 8005432:	f000 fcb7 	bl	8005da4 <_sbrk_r>
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	d00a      	beq.n	8005450 <sbrk_aligned+0x34>
 800543a:	1cc4      	adds	r4, r0, #3
 800543c:	f024 0403 	bic.w	r4, r4, #3
 8005440:	42a0      	cmp	r0, r4
 8005442:	d007      	beq.n	8005454 <sbrk_aligned+0x38>
 8005444:	1a21      	subs	r1, r4, r0
 8005446:	4628      	mov	r0, r5
 8005448:	f000 fcac 	bl	8005da4 <_sbrk_r>
 800544c:	3001      	adds	r0, #1
 800544e:	d101      	bne.n	8005454 <sbrk_aligned+0x38>
 8005450:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005454:	4620      	mov	r0, r4
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	20000374 	.word	0x20000374

0800545c <_malloc_r>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	1ccd      	adds	r5, r1, #3
 8005462:	4607      	mov	r7, r0
 8005464:	f025 0503 	bic.w	r5, r5, #3
 8005468:	3508      	adds	r5, #8
 800546a:	2d0c      	cmp	r5, #12
 800546c:	bf38      	it	cc
 800546e:	250c      	movcc	r5, #12
 8005470:	2d00      	cmp	r5, #0
 8005472:	db01      	blt.n	8005478 <_malloc_r+0x1c>
 8005474:	42a9      	cmp	r1, r5
 8005476:	d905      	bls.n	8005484 <_malloc_r+0x28>
 8005478:	230c      	movs	r3, #12
 800547a:	2600      	movs	r6, #0
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	4630      	mov	r0, r6
 8005480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005484:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005558 <_malloc_r+0xfc>
 8005488:	f000 f868 	bl	800555c <__malloc_lock>
 800548c:	f8d8 3000 	ldr.w	r3, [r8]
 8005490:	461c      	mov	r4, r3
 8005492:	bb5c      	cbnz	r4, 80054ec <_malloc_r+0x90>
 8005494:	4629      	mov	r1, r5
 8005496:	4638      	mov	r0, r7
 8005498:	f7ff ffc0 	bl	800541c <sbrk_aligned>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	4604      	mov	r4, r0
 80054a0:	d155      	bne.n	800554e <_malloc_r+0xf2>
 80054a2:	f8d8 4000 	ldr.w	r4, [r8]
 80054a6:	4626      	mov	r6, r4
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	d145      	bne.n	8005538 <_malloc_r+0xdc>
 80054ac:	2c00      	cmp	r4, #0
 80054ae:	d048      	beq.n	8005542 <_malloc_r+0xe6>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	4631      	mov	r1, r6
 80054b4:	4638      	mov	r0, r7
 80054b6:	eb04 0903 	add.w	r9, r4, r3
 80054ba:	f000 fc73 	bl	8005da4 <_sbrk_r>
 80054be:	4581      	cmp	r9, r0
 80054c0:	d13f      	bne.n	8005542 <_malloc_r+0xe6>
 80054c2:	6821      	ldr	r1, [r4, #0]
 80054c4:	4638      	mov	r0, r7
 80054c6:	1a6d      	subs	r5, r5, r1
 80054c8:	4629      	mov	r1, r5
 80054ca:	f7ff ffa7 	bl	800541c <sbrk_aligned>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d037      	beq.n	8005542 <_malloc_r+0xe6>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	442b      	add	r3, r5
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	f8d8 3000 	ldr.w	r3, [r8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d038      	beq.n	8005552 <_malloc_r+0xf6>
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	42a2      	cmp	r2, r4
 80054e4:	d12b      	bne.n	800553e <_malloc_r+0xe2>
 80054e6:	2200      	movs	r2, #0
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	e00f      	b.n	800550c <_malloc_r+0xb0>
 80054ec:	6822      	ldr	r2, [r4, #0]
 80054ee:	1b52      	subs	r2, r2, r5
 80054f0:	d41f      	bmi.n	8005532 <_malloc_r+0xd6>
 80054f2:	2a0b      	cmp	r2, #11
 80054f4:	d917      	bls.n	8005526 <_malloc_r+0xca>
 80054f6:	1961      	adds	r1, r4, r5
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	6025      	str	r5, [r4, #0]
 80054fc:	bf18      	it	ne
 80054fe:	6059      	strne	r1, [r3, #4]
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	bf08      	it	eq
 8005504:	f8c8 1000 	streq.w	r1, [r8]
 8005508:	5162      	str	r2, [r4, r5]
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	f104 060b 	add.w	r6, r4, #11
 8005510:	4638      	mov	r0, r7
 8005512:	f000 f829 	bl	8005568 <__malloc_unlock>
 8005516:	1d23      	adds	r3, r4, #4
 8005518:	f026 0607 	bic.w	r6, r6, #7
 800551c:	1af2      	subs	r2, r6, r3
 800551e:	d0ae      	beq.n	800547e <_malloc_r+0x22>
 8005520:	1b9b      	subs	r3, r3, r6
 8005522:	50a3      	str	r3, [r4, r2]
 8005524:	e7ab      	b.n	800547e <_malloc_r+0x22>
 8005526:	42a3      	cmp	r3, r4
 8005528:	6862      	ldr	r2, [r4, #4]
 800552a:	d1dd      	bne.n	80054e8 <_malloc_r+0x8c>
 800552c:	f8c8 2000 	str.w	r2, [r8]
 8005530:	e7ec      	b.n	800550c <_malloc_r+0xb0>
 8005532:	4623      	mov	r3, r4
 8005534:	6864      	ldr	r4, [r4, #4]
 8005536:	e7ac      	b.n	8005492 <_malloc_r+0x36>
 8005538:	4634      	mov	r4, r6
 800553a:	6876      	ldr	r6, [r6, #4]
 800553c:	e7b4      	b.n	80054a8 <_malloc_r+0x4c>
 800553e:	4613      	mov	r3, r2
 8005540:	e7cc      	b.n	80054dc <_malloc_r+0x80>
 8005542:	230c      	movs	r3, #12
 8005544:	4638      	mov	r0, r7
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	f000 f80e 	bl	8005568 <__malloc_unlock>
 800554c:	e797      	b.n	800547e <_malloc_r+0x22>
 800554e:	6025      	str	r5, [r4, #0]
 8005550:	e7dc      	b.n	800550c <_malloc_r+0xb0>
 8005552:	605b      	str	r3, [r3, #4]
 8005554:	deff      	udf	#255	; 0xff
 8005556:	bf00      	nop
 8005558:	20000370 	.word	0x20000370

0800555c <__malloc_lock>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__malloc_lock+0x8>)
 800555e:	f7ff bf0e 	b.w	800537e <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	2000036c 	.word	0x2000036c

08005568 <__malloc_unlock>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__malloc_unlock+0x8>)
 800556a:	f7ff bf09 	b.w	8005380 <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	2000036c 	.word	0x2000036c

08005574 <__sfputc_r>:
 8005574:	6893      	ldr	r3, [r2, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	6093      	str	r3, [r2, #8]
 800557c:	b410      	push	{r4}
 800557e:	da08      	bge.n	8005592 <__sfputc_r+0x1e>
 8005580:	6994      	ldr	r4, [r2, #24]
 8005582:	42a3      	cmp	r3, r4
 8005584:	db01      	blt.n	800558a <__sfputc_r+0x16>
 8005586:	290a      	cmp	r1, #10
 8005588:	d103      	bne.n	8005592 <__sfputc_r+0x1e>
 800558a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800558e:	f000 bb73 	b.w	8005c78 <__swbuf_r>
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	1c58      	adds	r0, r3, #1
 8005596:	6010      	str	r0, [r2, #0]
 8005598:	4608      	mov	r0, r1
 800559a:	7019      	strb	r1, [r3, #0]
 800559c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <__sfputs_r>:
 80055a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	18d5      	adds	r5, r2, r3
 80055ac:	42ac      	cmp	r4, r5
 80055ae:	d101      	bne.n	80055b4 <__sfputs_r+0x12>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e007      	b.n	80055c4 <__sfputs_r+0x22>
 80055b4:	463a      	mov	r2, r7
 80055b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffda 	bl	8005574 <__sfputc_r>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d1f3      	bne.n	80055ac <__sfputs_r+0xa>
 80055c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c8 <_vfiprintf_r>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	460d      	mov	r5, r1
 80055ce:	b09d      	sub	sp, #116	; 0x74
 80055d0:	4614      	mov	r4, r2
 80055d2:	4698      	mov	r8, r3
 80055d4:	4606      	mov	r6, r0
 80055d6:	b118      	cbz	r0, 80055e0 <_vfiprintf_r+0x18>
 80055d8:	6a03      	ldr	r3, [r0, #32]
 80055da:	b90b      	cbnz	r3, 80055e0 <_vfiprintf_r+0x18>
 80055dc:	f7ff fdca 	bl	8005174 <__sinit>
 80055e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055e2:	07d9      	lsls	r1, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_vfiprintf_r+0x2a>
 80055e6:	89ab      	ldrh	r3, [r5, #12]
 80055e8:	059a      	lsls	r2, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_vfiprintf_r+0x2a>
 80055ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ee:	f7ff fec6 	bl	800537e <__retarget_lock_acquire_recursive>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	071b      	lsls	r3, r3, #28
 80055f6:	d501      	bpl.n	80055fc <_vfiprintf_r+0x34>
 80055f8:	692b      	ldr	r3, [r5, #16]
 80055fa:	b99b      	cbnz	r3, 8005624 <_vfiprintf_r+0x5c>
 80055fc:	4629      	mov	r1, r5
 80055fe:	4630      	mov	r0, r6
 8005600:	f000 fb78 	bl	8005cf4 <__swsetup_r>
 8005604:	b170      	cbz	r0, 8005624 <_vfiprintf_r+0x5c>
 8005606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005608:	07dc      	lsls	r4, r3, #31
 800560a:	d504      	bpl.n	8005616 <_vfiprintf_r+0x4e>
 800560c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005610:	b01d      	add	sp, #116	; 0x74
 8005612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005616:	89ab      	ldrh	r3, [r5, #12]
 8005618:	0598      	lsls	r0, r3, #22
 800561a:	d4f7      	bmi.n	800560c <_vfiprintf_r+0x44>
 800561c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800561e:	f7ff feaf 	bl	8005380 <__retarget_lock_release_recursive>
 8005622:	e7f3      	b.n	800560c <_vfiprintf_r+0x44>
 8005624:	2300      	movs	r3, #0
 8005626:	f8cd 800c 	str.w	r8, [sp, #12]
 800562a:	f04f 0901 	mov.w	r9, #1
 800562e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80057e8 <_vfiprintf_r+0x220>
 8005632:	9309      	str	r3, [sp, #36]	; 0x24
 8005634:	2320      	movs	r3, #32
 8005636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563a:	2330      	movs	r3, #48	; 0x30
 800563c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005640:	4623      	mov	r3, r4
 8005642:	469a      	mov	sl, r3
 8005644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005648:	b10a      	cbz	r2, 800564e <_vfiprintf_r+0x86>
 800564a:	2a25      	cmp	r2, #37	; 0x25
 800564c:	d1f9      	bne.n	8005642 <_vfiprintf_r+0x7a>
 800564e:	ebba 0b04 	subs.w	fp, sl, r4
 8005652:	d00b      	beq.n	800566c <_vfiprintf_r+0xa4>
 8005654:	465b      	mov	r3, fp
 8005656:	4622      	mov	r2, r4
 8005658:	4629      	mov	r1, r5
 800565a:	4630      	mov	r0, r6
 800565c:	f7ff ffa1 	bl	80055a2 <__sfputs_r>
 8005660:	3001      	adds	r0, #1
 8005662:	f000 80a9 	beq.w	80057b8 <_vfiprintf_r+0x1f0>
 8005666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005668:	445a      	add	r2, fp
 800566a:	9209      	str	r2, [sp, #36]	; 0x24
 800566c:	f89a 3000 	ldrb.w	r3, [sl]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a1 	beq.w	80057b8 <_vfiprintf_r+0x1f0>
 8005676:	2300      	movs	r3, #0
 8005678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800567c:	f10a 0a01 	add.w	sl, sl, #1
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005688:	931a      	str	r3, [sp, #104]	; 0x68
 800568a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568e:	4654      	mov	r4, sl
 8005690:	2205      	movs	r2, #5
 8005692:	4855      	ldr	r0, [pc, #340]	; (80057e8 <_vfiprintf_r+0x220>)
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	f000 fb94 	bl	8005dc4 <memchr>
 800569c:	9a04      	ldr	r2, [sp, #16]
 800569e:	b9d8      	cbnz	r0, 80056d8 <_vfiprintf_r+0x110>
 80056a0:	06d1      	lsls	r1, r2, #27
 80056a2:	bf44      	itt	mi
 80056a4:	2320      	movmi	r3, #32
 80056a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056aa:	0713      	lsls	r3, r2, #28
 80056ac:	bf44      	itt	mi
 80056ae:	232b      	movmi	r3, #43	; 0x2b
 80056b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b4:	f89a 3000 	ldrb.w	r3, [sl]
 80056b8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ba:	d015      	beq.n	80056e8 <_vfiprintf_r+0x120>
 80056bc:	9a07      	ldr	r2, [sp, #28]
 80056be:	4654      	mov	r4, sl
 80056c0:	2000      	movs	r0, #0
 80056c2:	f04f 0c0a 	mov.w	ip, #10
 80056c6:	4621      	mov	r1, r4
 80056c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056cc:	3b30      	subs	r3, #48	; 0x30
 80056ce:	2b09      	cmp	r3, #9
 80056d0:	d94d      	bls.n	800576e <_vfiprintf_r+0x1a6>
 80056d2:	b1b0      	cbz	r0, 8005702 <_vfiprintf_r+0x13a>
 80056d4:	9207      	str	r2, [sp, #28]
 80056d6:	e014      	b.n	8005702 <_vfiprintf_r+0x13a>
 80056d8:	eba0 0308 	sub.w	r3, r0, r8
 80056dc:	46a2      	mov	sl, r4
 80056de:	fa09 f303 	lsl.w	r3, r9, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	e7d2      	b.n	800568e <_vfiprintf_r+0xc6>
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	1d19      	adds	r1, r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	9103      	str	r1, [sp, #12]
 80056f2:	bfbb      	ittet	lt
 80056f4:	425b      	neglt	r3, r3
 80056f6:	f042 0202 	orrlt.w	r2, r2, #2
 80056fa:	9307      	strge	r3, [sp, #28]
 80056fc:	9307      	strlt	r3, [sp, #28]
 80056fe:	bfb8      	it	lt
 8005700:	9204      	strlt	r2, [sp, #16]
 8005702:	7823      	ldrb	r3, [r4, #0]
 8005704:	2b2e      	cmp	r3, #46	; 0x2e
 8005706:	d10c      	bne.n	8005722 <_vfiprintf_r+0x15a>
 8005708:	7863      	ldrb	r3, [r4, #1]
 800570a:	2b2a      	cmp	r3, #42	; 0x2a
 800570c:	d134      	bne.n	8005778 <_vfiprintf_r+0x1b0>
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	3402      	adds	r4, #2
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	9203      	str	r2, [sp, #12]
 800571a:	bfb8      	it	lt
 800571c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005720:	9305      	str	r3, [sp, #20]
 8005722:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057f8 <_vfiprintf_r+0x230>
 8005726:	2203      	movs	r2, #3
 8005728:	7821      	ldrb	r1, [r4, #0]
 800572a:	4650      	mov	r0, sl
 800572c:	f000 fb4a 	bl	8005dc4 <memchr>
 8005730:	b138      	cbz	r0, 8005742 <_vfiprintf_r+0x17a>
 8005732:	eba0 000a 	sub.w	r0, r0, sl
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	9b04      	ldr	r3, [sp, #16]
 800573a:	3401      	adds	r4, #1
 800573c:	4082      	lsls	r2, r0
 800573e:	4313      	orrs	r3, r2
 8005740:	9304      	str	r3, [sp, #16]
 8005742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005746:	2206      	movs	r2, #6
 8005748:	4828      	ldr	r0, [pc, #160]	; (80057ec <_vfiprintf_r+0x224>)
 800574a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800574e:	f000 fb39 	bl	8005dc4 <memchr>
 8005752:	2800      	cmp	r0, #0
 8005754:	d03f      	beq.n	80057d6 <_vfiprintf_r+0x20e>
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <_vfiprintf_r+0x228>)
 8005758:	bb1b      	cbnz	r3, 80057a2 <_vfiprintf_r+0x1da>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	3307      	adds	r3, #7
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	3308      	adds	r3, #8
 8005764:	9303      	str	r3, [sp, #12]
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	443b      	add	r3, r7
 800576a:	9309      	str	r3, [sp, #36]	; 0x24
 800576c:	e768      	b.n	8005640 <_vfiprintf_r+0x78>
 800576e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005772:	460c      	mov	r4, r1
 8005774:	2001      	movs	r0, #1
 8005776:	e7a6      	b.n	80056c6 <_vfiprintf_r+0xfe>
 8005778:	2300      	movs	r3, #0
 800577a:	3401      	adds	r4, #1
 800577c:	f04f 0c0a 	mov.w	ip, #10
 8005780:	4619      	mov	r1, r3
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	4620      	mov	r0, r4
 8005786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800578a:	3a30      	subs	r2, #48	; 0x30
 800578c:	2a09      	cmp	r2, #9
 800578e:	d903      	bls.n	8005798 <_vfiprintf_r+0x1d0>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0c6      	beq.n	8005722 <_vfiprintf_r+0x15a>
 8005794:	9105      	str	r1, [sp, #20]
 8005796:	e7c4      	b.n	8005722 <_vfiprintf_r+0x15a>
 8005798:	fb0c 2101 	mla	r1, ip, r1, r2
 800579c:	4604      	mov	r4, r0
 800579e:	2301      	movs	r3, #1
 80057a0:	e7f0      	b.n	8005784 <_vfiprintf_r+0x1bc>
 80057a2:	ab03      	add	r3, sp, #12
 80057a4:	462a      	mov	r2, r5
 80057a6:	a904      	add	r1, sp, #16
 80057a8:	4630      	mov	r0, r6
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <_vfiprintf_r+0x22c>)
 80057ae:	f3af 8000 	nop.w
 80057b2:	4607      	mov	r7, r0
 80057b4:	1c78      	adds	r0, r7, #1
 80057b6:	d1d6      	bne.n	8005766 <_vfiprintf_r+0x19e>
 80057b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ba:	07d9      	lsls	r1, r3, #31
 80057bc:	d405      	bmi.n	80057ca <_vfiprintf_r+0x202>
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	059a      	lsls	r2, r3, #22
 80057c2:	d402      	bmi.n	80057ca <_vfiprintf_r+0x202>
 80057c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c6:	f7ff fddb 	bl	8005380 <__retarget_lock_release_recursive>
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	065b      	lsls	r3, r3, #25
 80057ce:	f53f af1d 	bmi.w	800560c <_vfiprintf_r+0x44>
 80057d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d4:	e71c      	b.n	8005610 <_vfiprintf_r+0x48>
 80057d6:	ab03      	add	r3, sp, #12
 80057d8:	462a      	mov	r2, r5
 80057da:	a904      	add	r1, sp, #16
 80057dc:	4630      	mov	r0, r6
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <_vfiprintf_r+0x22c>)
 80057e2:	f000 f87d 	bl	80058e0 <_printf_i>
 80057e6:	e7e4      	b.n	80057b2 <_vfiprintf_r+0x1ea>
 80057e8:	08005fb6 	.word	0x08005fb6
 80057ec:	08005fc0 	.word	0x08005fc0
 80057f0:	00000000 	.word	0x00000000
 80057f4:	080055a3 	.word	0x080055a3
 80057f8:	08005fbc 	.word	0x08005fbc

080057fc <_printf_common>:
 80057fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	4616      	mov	r6, r2
 8005802:	4699      	mov	r9, r3
 8005804:	688a      	ldr	r2, [r1, #8]
 8005806:	4607      	mov	r7, r0
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	460c      	mov	r4, r1
 800580c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005810:	4293      	cmp	r3, r2
 8005812:	bfb8      	it	lt
 8005814:	4613      	movlt	r3, r2
 8005816:	6033      	str	r3, [r6, #0]
 8005818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800581c:	b10a      	cbz	r2, 8005822 <_printf_common+0x26>
 800581e:	3301      	adds	r3, #1
 8005820:	6033      	str	r3, [r6, #0]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	0699      	lsls	r1, r3, #26
 8005826:	bf42      	ittt	mi
 8005828:	6833      	ldrmi	r3, [r6, #0]
 800582a:	3302      	addmi	r3, #2
 800582c:	6033      	strmi	r3, [r6, #0]
 800582e:	6825      	ldr	r5, [r4, #0]
 8005830:	f015 0506 	ands.w	r5, r5, #6
 8005834:	d106      	bne.n	8005844 <_printf_common+0x48>
 8005836:	f104 0a19 	add.w	sl, r4, #25
 800583a:	68e3      	ldr	r3, [r4, #12]
 800583c:	6832      	ldr	r2, [r6, #0]
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	42ab      	cmp	r3, r5
 8005842:	dc2b      	bgt.n	800589c <_printf_common+0xa0>
 8005844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005848:	1e13      	subs	r3, r2, #0
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	bf18      	it	ne
 800584e:	2301      	movne	r3, #1
 8005850:	0692      	lsls	r2, r2, #26
 8005852:	d430      	bmi.n	80058b6 <_printf_common+0xba>
 8005854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005858:	4649      	mov	r1, r9
 800585a:	4638      	mov	r0, r7
 800585c:	47c0      	blx	r8
 800585e:	3001      	adds	r0, #1
 8005860:	d023      	beq.n	80058aa <_printf_common+0xae>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	341a      	adds	r4, #26
 8005866:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	2b04      	cmp	r3, #4
 8005870:	bf0a      	itet	eq
 8005872:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005876:	2500      	movne	r5, #0
 8005878:	6833      	ldreq	r3, [r6, #0]
 800587a:	f04f 0600 	mov.w	r6, #0
 800587e:	bf08      	it	eq
 8005880:	1aed      	subeq	r5, r5, r3
 8005882:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005886:	bf08      	it	eq
 8005888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800588c:	4293      	cmp	r3, r2
 800588e:	bfc4      	itt	gt
 8005890:	1a9b      	subgt	r3, r3, r2
 8005892:	18ed      	addgt	r5, r5, r3
 8005894:	42b5      	cmp	r5, r6
 8005896:	d11a      	bne.n	80058ce <_printf_common+0xd2>
 8005898:	2000      	movs	r0, #0
 800589a:	e008      	b.n	80058ae <_printf_common+0xb2>
 800589c:	2301      	movs	r3, #1
 800589e:	4652      	mov	r2, sl
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c0      	blx	r8
 80058a6:	3001      	adds	r0, #1
 80058a8:	d103      	bne.n	80058b2 <_printf_common+0xb6>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	3501      	adds	r5, #1
 80058b4:	e7c1      	b.n	800583a <_printf_common+0x3e>
 80058b6:	18e1      	adds	r1, r4, r3
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	2030      	movs	r0, #48	; 0x30
 80058bc:	3302      	adds	r3, #2
 80058be:	4422      	add	r2, r4
 80058c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058cc:	e7c2      	b.n	8005854 <_printf_common+0x58>
 80058ce:	2301      	movs	r3, #1
 80058d0:	4622      	mov	r2, r4
 80058d2:	4649      	mov	r1, r9
 80058d4:	4638      	mov	r0, r7
 80058d6:	47c0      	blx	r8
 80058d8:	3001      	adds	r0, #1
 80058da:	d0e6      	beq.n	80058aa <_printf_common+0xae>
 80058dc:	3601      	adds	r6, #1
 80058de:	e7d9      	b.n	8005894 <_printf_common+0x98>

080058e0 <_printf_i>:
 80058e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	7e0f      	ldrb	r7, [r1, #24]
 80058e6:	4691      	mov	r9, r2
 80058e8:	4680      	mov	r8, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	2f78      	cmp	r7, #120	; 0x78
 80058ee:	469a      	mov	sl, r3
 80058f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058f6:	d807      	bhi.n	8005908 <_printf_i+0x28>
 80058f8:	2f62      	cmp	r7, #98	; 0x62
 80058fa:	d80a      	bhi.n	8005912 <_printf_i+0x32>
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	f000 80d3 	beq.w	8005aa8 <_printf_i+0x1c8>
 8005902:	2f58      	cmp	r7, #88	; 0x58
 8005904:	f000 80bf 	beq.w	8005a86 <_printf_i+0x1a6>
 8005908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005910:	e03a      	b.n	8005988 <_printf_i+0xa8>
 8005912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005916:	2b15      	cmp	r3, #21
 8005918:	d8f6      	bhi.n	8005908 <_printf_i+0x28>
 800591a:	a101      	add	r1, pc, #4	; (adr r1, 8005920 <_printf_i+0x40>)
 800591c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005920:	08005979 	.word	0x08005979
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005909 	.word	0x08005909
 800592c:	08005909 	.word	0x08005909
 8005930:	08005909 	.word	0x08005909
 8005934:	08005909 	.word	0x08005909
 8005938:	0800598d 	.word	0x0800598d
 800593c:	08005909 	.word	0x08005909
 8005940:	08005909 	.word	0x08005909
 8005944:	08005909 	.word	0x08005909
 8005948:	08005909 	.word	0x08005909
 800594c:	08005a8f 	.word	0x08005a8f
 8005950:	080059b9 	.word	0x080059b9
 8005954:	08005a4b 	.word	0x08005a4b
 8005958:	08005909 	.word	0x08005909
 800595c:	08005909 	.word	0x08005909
 8005960:	08005ab1 	.word	0x08005ab1
 8005964:	08005909 	.word	0x08005909
 8005968:	080059b9 	.word	0x080059b9
 800596c:	08005909 	.word	0x08005909
 8005970:	08005909 	.word	0x08005909
 8005974:	08005a53 	.word	0x08005a53
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005988:	2301      	movs	r3, #1
 800598a:	e09e      	b.n	8005aca <_printf_i+0x1ea>
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	0607      	lsls	r7, r0, #24
 8005992:	f103 0104 	add.w	r1, r3, #4
 8005996:	6029      	str	r1, [r5, #0]
 8005998:	d501      	bpl.n	800599e <_printf_i+0xbe>
 800599a:	681e      	ldr	r6, [r3, #0]
 800599c:	e003      	b.n	80059a6 <_printf_i+0xc6>
 800599e:	0646      	lsls	r6, r0, #25
 80059a0:	d5fb      	bpl.n	800599a <_printf_i+0xba>
 80059a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	da03      	bge.n	80059b2 <_printf_i+0xd2>
 80059aa:	232d      	movs	r3, #45	; 0x2d
 80059ac:	4276      	negs	r6, r6
 80059ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b2:	4859      	ldr	r0, [pc, #356]	; (8005b18 <_printf_i+0x238>)
 80059b4:	230a      	movs	r3, #10
 80059b6:	e012      	b.n	80059de <_printf_i+0xfe>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	6029      	str	r1, [r5, #0]
 80059c0:	0605      	lsls	r5, r0, #24
 80059c2:	d501      	bpl.n	80059c8 <_printf_i+0xe8>
 80059c4:	681e      	ldr	r6, [r3, #0]
 80059c6:	e002      	b.n	80059ce <_printf_i+0xee>
 80059c8:	0641      	lsls	r1, r0, #25
 80059ca:	d5fb      	bpl.n	80059c4 <_printf_i+0xe4>
 80059cc:	881e      	ldrh	r6, [r3, #0]
 80059ce:	2f6f      	cmp	r7, #111	; 0x6f
 80059d0:	4851      	ldr	r0, [pc, #324]	; (8005b18 <_printf_i+0x238>)
 80059d2:	bf0c      	ite	eq
 80059d4:	2308      	moveq	r3, #8
 80059d6:	230a      	movne	r3, #10
 80059d8:	2100      	movs	r1, #0
 80059da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059de:	6865      	ldr	r5, [r4, #4]
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	60a5      	str	r5, [r4, #8]
 80059e4:	bfa2      	ittt	ge
 80059e6:	6821      	ldrge	r1, [r4, #0]
 80059e8:	f021 0104 	bicge.w	r1, r1, #4
 80059ec:	6021      	strge	r1, [r4, #0]
 80059ee:	b90e      	cbnz	r6, 80059f4 <_printf_i+0x114>
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	d04a      	beq.n	8005a8a <_printf_i+0x1aa>
 80059f4:	4615      	mov	r5, r2
 80059f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fa:	fb03 6711 	mls	r7, r3, r1, r6
 80059fe:	5dc7      	ldrb	r7, [r0, r7]
 8005a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a04:	4637      	mov	r7, r6
 8005a06:	460e      	mov	r6, r1
 8005a08:	42bb      	cmp	r3, r7
 8005a0a:	d9f4      	bls.n	80059f6 <_printf_i+0x116>
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d10b      	bne.n	8005a28 <_printf_i+0x148>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	07de      	lsls	r6, r3, #31
 8005a14:	d508      	bpl.n	8005a28 <_printf_i+0x148>
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	6861      	ldr	r1, [r4, #4]
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	bfde      	ittt	le
 8005a1e:	2330      	movle	r3, #48	; 0x30
 8005a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a28:	1b52      	subs	r2, r2, r5
 8005a2a:	6122      	str	r2, [r4, #16]
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	aa03      	add	r2, sp, #12
 8005a30:	4621      	mov	r1, r4
 8005a32:	4640      	mov	r0, r8
 8005a34:	f8cd a000 	str.w	sl, [sp]
 8005a38:	f7ff fee0 	bl	80057fc <_printf_common>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d149      	bne.n	8005ad4 <_printf_i+0x1f4>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a44:	b004      	add	sp, #16
 8005a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f043 0320 	orr.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2778      	movs	r7, #120	; 0x78
 8005a54:	4831      	ldr	r0, [pc, #196]	; (8005b1c <_printf_i+0x23c>)
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5c:	061f      	lsls	r7, r3, #24
 8005a5e:	6829      	ldr	r1, [r5, #0]
 8005a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a64:	d402      	bmi.n	8005a6c <_printf_i+0x18c>
 8005a66:	065f      	lsls	r7, r3, #25
 8005a68:	bf48      	it	mi
 8005a6a:	b2b6      	uxthmi	r6, r6
 8005a6c:	07df      	lsls	r7, r3, #31
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	bf44      	itt	mi
 8005a72:	f043 0320 	orrmi.w	r3, r3, #32
 8005a76:	6023      	strmi	r3, [r4, #0]
 8005a78:	b91e      	cbnz	r6, 8005a82 <_printf_i+0x1a2>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f023 0320 	bic.w	r3, r3, #32
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	2310      	movs	r3, #16
 8005a84:	e7a8      	b.n	80059d8 <_printf_i+0xf8>
 8005a86:	4824      	ldr	r0, [pc, #144]	; (8005b18 <_printf_i+0x238>)
 8005a88:	e7e5      	b.n	8005a56 <_printf_i+0x176>
 8005a8a:	4615      	mov	r5, r2
 8005a8c:	e7be      	b.n	8005a0c <_printf_i+0x12c>
 8005a8e:	682b      	ldr	r3, [r5, #0]
 8005a90:	6826      	ldr	r6, [r4, #0]
 8005a92:	1d18      	adds	r0, r3, #4
 8005a94:	6961      	ldr	r1, [r4, #20]
 8005a96:	6028      	str	r0, [r5, #0]
 8005a98:	0635      	lsls	r5, r6, #24
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	d501      	bpl.n	8005aa2 <_printf_i+0x1c2>
 8005a9e:	6019      	str	r1, [r3, #0]
 8005aa0:	e002      	b.n	8005aa8 <_printf_i+0x1c8>
 8005aa2:	0670      	lsls	r0, r6, #25
 8005aa4:	d5fb      	bpl.n	8005a9e <_printf_i+0x1be>
 8005aa6:	8019      	strh	r1, [r3, #0]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4615      	mov	r5, r2
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	e7bd      	b.n	8005a2c <_printf_i+0x14c>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	1d1a      	adds	r2, r3, #4
 8005ab6:	602a      	str	r2, [r5, #0]
 8005ab8:	681d      	ldr	r5, [r3, #0]
 8005aba:	6862      	ldr	r2, [r4, #4]
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f981 	bl	8005dc4 <memchr>
 8005ac2:	b108      	cbz	r0, 8005ac8 <_printf_i+0x1e8>
 8005ac4:	1b40      	subs	r0, r0, r5
 8005ac6:	6060      	str	r0, [r4, #4]
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	6123      	str	r3, [r4, #16]
 8005acc:	2300      	movs	r3, #0
 8005ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad2:	e7ab      	b.n	8005a2c <_printf_i+0x14c>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	462a      	mov	r2, r5
 8005ad8:	4649      	mov	r1, r9
 8005ada:	4640      	mov	r0, r8
 8005adc:	47d0      	blx	sl
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d0ae      	beq.n	8005a40 <_printf_i+0x160>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	079b      	lsls	r3, r3, #30
 8005ae6:	d413      	bmi.n	8005b10 <_printf_i+0x230>
 8005ae8:	68e0      	ldr	r0, [r4, #12]
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	4298      	cmp	r0, r3
 8005aee:	bfb8      	it	lt
 8005af0:	4618      	movlt	r0, r3
 8005af2:	e7a7      	b.n	8005a44 <_printf_i+0x164>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4632      	mov	r2, r6
 8005af8:	4649      	mov	r1, r9
 8005afa:	4640      	mov	r0, r8
 8005afc:	47d0      	blx	sl
 8005afe:	3001      	adds	r0, #1
 8005b00:	d09e      	beq.n	8005a40 <_printf_i+0x160>
 8005b02:	3501      	adds	r5, #1
 8005b04:	68e3      	ldr	r3, [r4, #12]
 8005b06:	9903      	ldr	r1, [sp, #12]
 8005b08:	1a5b      	subs	r3, r3, r1
 8005b0a:	42ab      	cmp	r3, r5
 8005b0c:	dcf2      	bgt.n	8005af4 <_printf_i+0x214>
 8005b0e:	e7eb      	b.n	8005ae8 <_printf_i+0x208>
 8005b10:	2500      	movs	r5, #0
 8005b12:	f104 0619 	add.w	r6, r4, #25
 8005b16:	e7f5      	b.n	8005b04 <_printf_i+0x224>
 8005b18:	08005fc7 	.word	0x08005fc7
 8005b1c:	08005fd8 	.word	0x08005fd8

08005b20 <__sflush_r>:
 8005b20:	898a      	ldrh	r2, [r1, #12]
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	0710      	lsls	r0, r2, #28
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	d458      	bmi.n	8005be0 <__sflush_r+0xc0>
 8005b2e:	684b      	ldr	r3, [r1, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dc05      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dc02      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d0f9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b4c:	682f      	ldr	r7, [r5, #0]
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	d032      	beq.n	8005bba <__sflush_r+0x9a>
 8005b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	075a      	lsls	r2, r3, #29
 8005b5a:	d505      	bpl.n	8005b68 <__sflush_r+0x48>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b62:	b10b      	cbz	r3, 8005b68 <__sflush_r+0x48>
 8005b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b66:	1ac0      	subs	r0, r0, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b6e:	4628      	mov	r0, r5
 8005b70:	6a21      	ldr	r1, [r4, #32]
 8005b72:	47b0      	blx	r6
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	d106      	bne.n	8005b88 <__sflush_r+0x68>
 8005b7a:	6829      	ldr	r1, [r5, #0]
 8005b7c:	291d      	cmp	r1, #29
 8005b7e:	d82b      	bhi.n	8005bd8 <__sflush_r+0xb8>
 8005b80:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <__sflush_r+0x104>)
 8005b82:	410a      	asrs	r2, r1
 8005b84:	07d6      	lsls	r6, r2, #31
 8005b86:	d427      	bmi.n	8005bd8 <__sflush_r+0xb8>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	04d9      	lsls	r1, r3, #19
 8005b8c:	6062      	str	r2, [r4, #4]
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	d504      	bpl.n	8005b9e <__sflush_r+0x7e>
 8005b94:	1c42      	adds	r2, r0, #1
 8005b96:	d101      	bne.n	8005b9c <__sflush_r+0x7c>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b903      	cbnz	r3, 8005b9e <__sflush_r+0x7e>
 8005b9c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba0:	602f      	str	r7, [r5, #0]
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d0c9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d002      	beq.n	8005bb4 <__sflush_r+0x94>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7ff fbe8 	bl	8005384 <_free_r>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb8:	e7c0      	b.n	8005b3c <__sflush_r+0x1c>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b0      	blx	r6
 8005bc0:	1c41      	adds	r1, r0, #1
 8005bc2:	d1c8      	bne.n	8005b56 <__sflush_r+0x36>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c5      	beq.n	8005b56 <__sflush_r+0x36>
 8005bca:	2b1d      	cmp	r3, #29
 8005bcc:	d001      	beq.n	8005bd2 <__sflush_r+0xb2>
 8005bce:	2b16      	cmp	r3, #22
 8005bd0:	d101      	bne.n	8005bd6 <__sflush_r+0xb6>
 8005bd2:	602f      	str	r7, [r5, #0]
 8005bd4:	e7b1      	b.n	8005b3a <__sflush_r+0x1a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7ad      	b.n	8005b3c <__sflush_r+0x1c>
 8005be0:	690f      	ldr	r7, [r1, #16]
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d0a9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005be6:	0793      	lsls	r3, r2, #30
 8005be8:	680e      	ldr	r6, [r1, #0]
 8005bea:	600f      	str	r7, [r1, #0]
 8005bec:	bf0c      	ite	eq
 8005bee:	694b      	ldreq	r3, [r1, #20]
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	eba6 0807 	sub.w	r8, r6, r7
 8005bf6:	608b      	str	r3, [r1, #8]
 8005bf8:	f1b8 0f00 	cmp.w	r8, #0
 8005bfc:	dd9d      	ble.n	8005b3a <__sflush_r+0x1a>
 8005bfe:	4643      	mov	r3, r8
 8005c00:	463a      	mov	r2, r7
 8005c02:	6a21      	ldr	r1, [r4, #32]
 8005c04:	4628      	mov	r0, r5
 8005c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c08:	47b0      	blx	r6
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	dc06      	bgt.n	8005c1c <__sflush_r+0xfc>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	e78f      	b.n	8005b3c <__sflush_r+0x1c>
 8005c1c:	4407      	add	r7, r0
 8005c1e:	eba8 0800 	sub.w	r8, r8, r0
 8005c22:	e7e9      	b.n	8005bf8 <__sflush_r+0xd8>
 8005c24:	dfbffffe 	.word	0xdfbffffe

08005c28 <_fflush_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	690b      	ldr	r3, [r1, #16]
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b913      	cbnz	r3, 8005c38 <_fflush_r+0x10>
 8005c32:	2500      	movs	r5, #0
 8005c34:	4628      	mov	r0, r5
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	b118      	cbz	r0, 8005c42 <_fflush_r+0x1a>
 8005c3a:	6a03      	ldr	r3, [r0, #32]
 8005c3c:	b90b      	cbnz	r3, 8005c42 <_fflush_r+0x1a>
 8005c3e:	f7ff fa99 	bl	8005174 <__sinit>
 8005c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f3      	beq.n	8005c32 <_fflush_r+0xa>
 8005c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c4c:	07d0      	lsls	r0, r2, #31
 8005c4e:	d404      	bmi.n	8005c5a <_fflush_r+0x32>
 8005c50:	0599      	lsls	r1, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_fflush_r+0x32>
 8005c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c56:	f7ff fb92 	bl	800537e <__retarget_lock_acquire_recursive>
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	f7ff ff5f 	bl	8005b20 <__sflush_r>
 8005c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c64:	4605      	mov	r5, r0
 8005c66:	07da      	lsls	r2, r3, #31
 8005c68:	d4e4      	bmi.n	8005c34 <_fflush_r+0xc>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	059b      	lsls	r3, r3, #22
 8005c6e:	d4e1      	bmi.n	8005c34 <_fflush_r+0xc>
 8005c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c72:	f7ff fb85 	bl	8005380 <__retarget_lock_release_recursive>
 8005c76:	e7dd      	b.n	8005c34 <_fflush_r+0xc>

08005c78 <__swbuf_r>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4605      	mov	r5, r0
 8005c80:	b118      	cbz	r0, 8005c8a <__swbuf_r+0x12>
 8005c82:	6a03      	ldr	r3, [r0, #32]
 8005c84:	b90b      	cbnz	r3, 8005c8a <__swbuf_r+0x12>
 8005c86:	f7ff fa75 	bl	8005174 <__sinit>
 8005c8a:	69a3      	ldr	r3, [r4, #24]
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	071a      	lsls	r2, r3, #28
 8005c92:	d525      	bpl.n	8005ce0 <__swbuf_r+0x68>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	b31b      	cbz	r3, 8005ce0 <__swbuf_r+0x68>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	b2f6      	uxtb	r6, r6
 8005c9c:	6922      	ldr	r2, [r4, #16]
 8005c9e:	4637      	mov	r7, r6
 8005ca0:	1a98      	subs	r0, r3, r2
 8005ca2:	6963      	ldr	r3, [r4, #20]
 8005ca4:	4283      	cmp	r3, r0
 8005ca6:	dc04      	bgt.n	8005cb2 <__swbuf_r+0x3a>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7ff ffbc 	bl	8005c28 <_fflush_r>
 8005cb0:	b9e0      	cbnz	r0, 8005cec <__swbuf_r+0x74>
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	60a3      	str	r3, [r4, #8]
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	6022      	str	r2, [r4, #0]
 8005cbe:	701e      	strb	r6, [r3, #0]
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	6962      	ldr	r2, [r4, #20]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d004      	beq.n	8005cd2 <__swbuf_r+0x5a>
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	d506      	bpl.n	8005cdc <__swbuf_r+0x64>
 8005cce:	2e0a      	cmp	r6, #10
 8005cd0:	d104      	bne.n	8005cdc <__swbuf_r+0x64>
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7ff ffa7 	bl	8005c28 <_fflush_r>
 8005cda:	b938      	cbnz	r0, 8005cec <__swbuf_r+0x74>
 8005cdc:	4638      	mov	r0, r7
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 f806 	bl	8005cf4 <__swsetup_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d0d5      	beq.n	8005c98 <__swbuf_r+0x20>
 8005cec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cf0:	e7f4      	b.n	8005cdc <__swbuf_r+0x64>
	...

08005cf4 <__swsetup_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <__swsetup_r+0xac>)
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	b118      	cbz	r0, 8005d08 <__swsetup_r+0x14>
 8005d00:	6a03      	ldr	r3, [r0, #32]
 8005d02:	b90b      	cbnz	r3, 8005d08 <__swsetup_r+0x14>
 8005d04:	f7ff fa36 	bl	8005174 <__sinit>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d0e:	0718      	lsls	r0, r3, #28
 8005d10:	d422      	bmi.n	8005d58 <__swsetup_r+0x64>
 8005d12:	06d9      	lsls	r1, r3, #27
 8005d14:	d407      	bmi.n	8005d26 <__swsetup_r+0x32>
 8005d16:	2309      	movs	r3, #9
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	e034      	b.n	8005d90 <__swsetup_r+0x9c>
 8005d26:	0758      	lsls	r0, r3, #29
 8005d28:	d512      	bpl.n	8005d50 <__swsetup_r+0x5c>
 8005d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d2c:	b141      	cbz	r1, 8005d40 <__swsetup_r+0x4c>
 8005d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d32:	4299      	cmp	r1, r3
 8005d34:	d002      	beq.n	8005d3c <__swsetup_r+0x48>
 8005d36:	4628      	mov	r0, r5
 8005d38:	f7ff fb24 	bl	8005384 <_free_r>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6363      	str	r3, [r4, #52]	; 0x34
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f043 0308 	orr.w	r3, r3, #8
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	b94b      	cbnz	r3, 8005d70 <__swsetup_r+0x7c>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d66:	d003      	beq.n	8005d70 <__swsetup_r+0x7c>
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f85d 	bl	8005e2a <__smakebuf_r>
 8005d70:	89a0      	ldrh	r0, [r4, #12]
 8005d72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d76:	f010 0301 	ands.w	r3, r0, #1
 8005d7a:	d00a      	beq.n	8005d92 <__swsetup_r+0x9e>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	6963      	ldr	r3, [r4, #20]
 8005d82:	425b      	negs	r3, r3
 8005d84:	61a3      	str	r3, [r4, #24]
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	b943      	cbnz	r3, 8005d9c <__swsetup_r+0xa8>
 8005d8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d8e:	d1c4      	bne.n	8005d1a <__swsetup_r+0x26>
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	0781      	lsls	r1, r0, #30
 8005d94:	bf58      	it	pl
 8005d96:	6963      	ldrpl	r3, [r4, #20]
 8005d98:	60a3      	str	r3, [r4, #8]
 8005d9a:	e7f4      	b.n	8005d86 <__swsetup_r+0x92>
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e7f7      	b.n	8005d90 <__swsetup_r+0x9c>
 8005da0:	20000070 	.word	0x20000070

08005da4 <_sbrk_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	2300      	movs	r3, #0
 8005da8:	4d05      	ldr	r5, [pc, #20]	; (8005dc0 <_sbrk_r+0x1c>)
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fa fe96 	bl	8000ae0 <_sbrk>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_sbrk_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_sbrk_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20000368 	.word	0x20000368

08005dc4 <memchr>:
 8005dc4:	b2c9      	uxtb	r1, r1
 8005dc6:	4402      	add	r2, r0
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4290      	cmp	r0, r2
 8005dcc:	4603      	mov	r3, r0
 8005dce:	d101      	bne.n	8005dd4 <memchr+0x10>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e003      	b.n	8005ddc <memchr+0x18>
 8005dd4:	781c      	ldrb	r4, [r3, #0]
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	428c      	cmp	r4, r1
 8005dda:	d1f6      	bne.n	8005dca <memchr+0x6>
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd10      	pop	{r4, pc}

08005de0 <__swhatbuf_r>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	460c      	mov	r4, r1
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	b096      	sub	sp, #88	; 0x58
 8005dea:	4615      	mov	r5, r2
 8005dec:	2900      	cmp	r1, #0
 8005dee:	461e      	mov	r6, r3
 8005df0:	da0c      	bge.n	8005e0c <__swhatbuf_r+0x2c>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	2100      	movs	r1, #0
 8005df6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dfa:	bf0c      	ite	eq
 8005dfc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e00:	2340      	movne	r3, #64	; 0x40
 8005e02:	2000      	movs	r0, #0
 8005e04:	6031      	str	r1, [r6, #0]
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	b016      	add	sp, #88	; 0x58
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	466a      	mov	r2, sp
 8005e0e:	f000 f849 	bl	8005ea4 <_fstat_r>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	dbed      	blt.n	8005df2 <__swhatbuf_r+0x12>
 8005e16:	9901      	ldr	r1, [sp, #4]
 8005e18:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e1c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e20:	4259      	negs	r1, r3
 8005e22:	4159      	adcs	r1, r3
 8005e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e28:	e7eb      	b.n	8005e02 <__swhatbuf_r+0x22>

08005e2a <__smakebuf_r>:
 8005e2a:	898b      	ldrh	r3, [r1, #12]
 8005e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e2e:	079d      	lsls	r5, r3, #30
 8005e30:	4606      	mov	r6, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	d507      	bpl.n	8005e46 <__smakebuf_r+0x1c>
 8005e36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	6123      	str	r3, [r4, #16]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	6163      	str	r3, [r4, #20]
 8005e42:	b002      	add	sp, #8
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	ab01      	add	r3, sp, #4
 8005e48:	466a      	mov	r2, sp
 8005e4a:	f7ff ffc9 	bl	8005de0 <__swhatbuf_r>
 8005e4e:	9900      	ldr	r1, [sp, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff fb02 	bl	800545c <_malloc_r>
 8005e58:	b948      	cbnz	r0, 8005e6e <__smakebuf_r+0x44>
 8005e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5e:	059a      	lsls	r2, r3, #22
 8005e60:	d4ef      	bmi.n	8005e42 <__smakebuf_r+0x18>
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	e7e3      	b.n	8005e36 <__smakebuf_r+0xc>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	6020      	str	r0, [r4, #0]
 8005e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e76:	6120      	str	r0, [r4, #16]
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	9b00      	ldr	r3, [sp, #0]
 8005e7c:	6163      	str	r3, [r4, #20]
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	b15b      	cbz	r3, 8005e9a <__smakebuf_r+0x70>
 8005e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 f81e 	bl	8005ec8 <_isatty_r>
 8005e8c:	b128      	cbz	r0, 8005e9a <__smakebuf_r+0x70>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f023 0303 	bic.w	r3, r3, #3
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	431d      	orrs	r5, r3
 8005e9e:	81a5      	strh	r5, [r4, #12]
 8005ea0:	e7cf      	b.n	8005e42 <__smakebuf_r+0x18>
	...

08005ea4 <_fstat_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	4d06      	ldr	r5, [pc, #24]	; (8005ec4 <_fstat_r+0x20>)
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	f7fe ff50 	bl	8004d56 <_fstat>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d102      	bne.n	8005ec0 <_fstat_r+0x1c>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	b103      	cbz	r3, 8005ec0 <_fstat_r+0x1c>
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000368 	.word	0x20000368

08005ec8 <_isatty_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	2300      	movs	r3, #0
 8005ecc:	4d05      	ldr	r5, [pc, #20]	; (8005ee4 <_isatty_r+0x1c>)
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7ff f8a6 	bl	8005024 <_isatty>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_isatty_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_isatty_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20000368 	.word	0x20000368

08005ee8 <_init>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr

08005ef4 <_fini>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr
