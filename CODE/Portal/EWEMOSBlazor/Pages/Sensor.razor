@page "/controller/{controllerID}/{sensorID:long}"

@if (EMSensor is not null)
{
	<PageTitle>@EMSensor.Name</PageTitle>

	<div class="name">
		<h1>@EMSensor.Name</h1>
		<a role="button" @onclick="OnEditClick">
			<img src="mdi--cog.svg" alt="Configure" style="width: 1.5em"/>
		</a>
	</div>

	<span class="id">ID: @EMSensor.ID</span>

	<hr/>

	<p>Type: @EMSensor.Type</p>

	<p>Interval: @EMSensor.Interval ms</p>
	<h3>@EMSensor.Data</h3>

	@* <Canvas @ref="helper_canvas" width="150px" height="300px" /> *@
	@* <div id="chart_div" class="card shadow m-5" style="height: 400px;"></div> *@

	@* <LineChart @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@options"> *@
	@* 	$1$ <ChartStreaming TItem="LiveDataPoint" #1# *@
	@* 	$1$                 Options="new ChartStreamingOptions { Delay = 2000 }" #1# *@
	@* 	$1$                 Refreshed="@OnHorizontalLineRefreshed" /> #1# *@
	@* </LineChart> *@
	
	<dialog>
		<h1>Editing @EMSensor.Name</h1>
		
		<hr/>

		<form method="post" @onsubmit="OnSubmit">
			<div>
				<label for="sensorName">Sensor name:</label><br>
				<input id="sensorName" type="text" @bind="SensorName" bind:event="oninput" pattern="[A-Za-z0-9]{1,64}"/>
			</div>

			<div>
				<label for="sensorInterval">Sensor Interval (ms):</label><br>
				<div class="number-input">
					<button id="minus" class="minus oi oi-minus"></button>
					<input type="number" id="sensorInterval" min="100" max="10000" step="10" pattern="\d*" @bind="SensorInterval" bind:event="oninput"/>
					<button id="plus" class="plus oi oi-plus"></button>
				</div>
			</div>

			<div class="config-buttons">
				<button type="button" onclick="closeDialog()">Cancel</button>
				<button >Confirm</button>
			</div>
		</form>

	</dialog>
}
else
{
	<PageTitle>Unknown sensor</PageTitle>
	<h1>Unknown sensor: @SensorID</h1>
}

<script src="./Pages/Sensor.razor.js"></script>

@code{
	private int PointCount = 123;
	private bool ChartHidden = true;
	Random Rand = new Random();

	private void PlotData(double[] xs, double[] ys)
	{
		JS.InvokeVoidAsync("createNewChart", new { xs, ys });
	}

	private void PlotSin()
	{
		double[] xs = Enumerable.Range(0, PointCount).Select(x => (double)x).ToArray();
		double[] ys = xs.Select(x => Math.Sin(x / 10)).ToArray();
		PlotData(xs, ys);
	}

	private void PlotRandom()
	{
		double[] xs = Enumerable.Range(0, PointCount).Select(x => (double)x).ToArray();
		double[] ys = xs.Select(x => (Rand.NextDouble() - .5) * 1000).ToArray();
		PlotData(xs, ys);
	}

	private void PlotWalk()
	{
		double[] xs = Enumerable.Range(0, PointCount).Select(x => (double)x).ToArray();
		double[] ys = new double[PointCount];
		for (int i = 1; i < ys.Length; i++)
			ys[i] = ys[i - 1] + Rand.NextDouble() - .5;
		PlotData(xs, ys);
	}

	private void PlotRandomXY()
	{
		double[] xs = Enumerable.Range(0, PointCount).Select(x => Rand.NextDouble()).ToArray();
		double[] ys = Enumerable.Range(0, PointCount).Select(x => Rand.NextDouble()).ToArray();
		PlotData(xs, ys);
	}

}